(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[931],{5910:function(e,t,a){Promise.resolve().then(a.bind(a,708))},708:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return P}});var o=a(7437),r=a(2265);let n=[{id:"supervisor-agent-architecture",title:"Supervisor-Agent Architecture",description:'In a Supervisor-Agent architecture, one agent acts as the central "supervisor" or "orchestrator." This supervisor agent is responsible for receiving a task, breaking it down into smaller sub-tasks, and delegating those sub-tasks to specialized "worker" agents. The supervisor then monitors the progress of the worker agents and synthesizes their outputs to produce the final result. This architecture is easy to start with and is effective for workflows that can be clearly broken down into distinct steps.',longDescription:"The Supervisor-Agent architecture features a central supervisor agent that orchestrates specialized worker agents. The supervisor receives tasks, decomposes them into manageable sub-tasks, and delegates them to appropriate worker agents based on their specializations. As worker agents complete their assignments, the supervisor monitors progress and collects results, ultimately synthesizing outputs to generate the final solution. This architecture is particularly effective for complex workflows that can be clearly partitioned into distinct, specialized steps, making it an excellent starting point for multi-agent systems.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Hierarchical","Orchestration"],tags:["supervisor","orchestrator","delegation","task-management","workflow"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Supervisor-Agent Architecture - Central supervisor with connections to specialized worker agents"},implementation:{codeExample:"In a practical content creation scenario, imagine a marketing team needs to produce a comprehensive report about renewable energy trends. The supervisor receives this high-level task and immediately breaks it down into specialized subtasks: a researcher agent gathers the latest data and market analysis, a writer agent drafts the main content based on the research findings, and an editor agent refines the draft for clarity and impact. Each agent operates independently but under the supervisor's coordination, with the researcher completing their work in 2 hours, the writer taking 3 hours to create the initial draft, and the editor spending 1 hour polishing the final output. The supervisor monitors progress, ensures quality standards are met, and seamlessly integrates the results into a cohesive final report that would have taken a single person 8-10 hours to complete with the same level of expertise and detail.\n\nThis architecture excels in complex customer support environments where different types of inquiries require specialized knowledge. For instance, when a customer contacts a tech company with a billing issue that also involves technical troubleshooting, the supervisor can simultaneously dispatch a billing specialist to investigate the charge discrepancy while a technical support agent diagnoses the system problem. The billing agent might discover an erroneous subscription charge and process a refund, while the technical agent identifies a software patch that needs deployment. The supervisor then synthesizes both solutions into a comprehensive response that addresses both the financial and technical aspects of the customer's issue, providing a faster and more effective resolution than if a single agent had to handle both domains sequentially.",language:"text"},useCases:['Content Creation: A supervisor agent can manage a team of agents including a "researcher" to gather information, a "writer" to draft the content, and an "editor" to proofread and format it.','Customer Support: A supervisor agent can route a customer query to the appropriate specialized agent, such as a "billing inquiries" agent or a "technical support" agent.','Data Analysis: A supervisor can oversee a "data gathering" agent, a "data cleaning" agent, and a "data visualization" agent to generate a report.'],createdAt:"2024-02-01",updatedAt:"2024-02-01",documentationUrl:"https://langchain-ai.github.io/langgraph/tutorials/multi_agent/agent_supervisor/",visual:{name:"Supervisor-Agent Architecture",type:"supervisor-agent",components:[{id:"api-gateway",type:"input",position:{x:301,y:24},label:"User Request",color:"#53d5fd"},{id:"user-service",type:"agent",position:{x:297,y:154},label:"Supervisor Agent",color:"#e392fe"},{id:"component-1754402084967-sde0h8o5v",type:"agent",position:{x:21,y:300},label:"Researcher Agent",color:"#ffe4a8"},{id:"component-1754402094901-1kj9kyi2m",type:"agent",position:{x:427,y:354},label:"Editor Agent",color:"#ffe4a8"},{id:"component-1754402097646-awfvubwit",type:"agent",position:{x:209,y:356},label:"Writer Agent",color:"#ffe4a8"},{id:"component-1754402315721-iwxuq8hsk",type:"output",position:{x:582,y:167},label:"Final Output",color:"#94e3fe"}],connections:[{id:"conn-1",from:"api-gateway",to:"user-service",type:"http",name:"files"},{id:"conn-1754402129993-lle7bh1eh",name:"Order",from:"user-service",to:"component-1754402084967-sde0h8o5v",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754402132303-ahyardjh2",name:"Order",from:"user-service",to:"component-1754402097646-awfvubwit",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754402134812-kqvvukodz",name:"Order",from:"user-service",to:"component-1754402094901-1kj9kyi2m",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754402179140-mvgsqmpah",name:"Response",from:"component-1754402084967-sde0h8o5v",to:"user-service",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754402212514-hzd1li4kb",name:"Response",from:"component-1754402097646-awfvubwit",to:"user-service",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754402223852-arjqdqk05",name:"Response",from:"component-1754402094901-1kj9kyi2m",to:"user-service",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754402323973-h48l5hubg",name:"files",from:"user-service",to:"component-1754402315721-iwxuq8hsk",type:"custom",fromCorner:"auto",toCorner:"auto"}]}},{id:"basic-sequential",title:"Basic Sequential",description:"Agents operate in a linear pipeline; each agent’s output is the next agent’s input.",longDescription:"In a sequential architecture, agents work in a pipeline where the output of one agent becomes the input for the next in the sequence. This creates a linear workflow, with each agent performing a specific transformation on the data it receives. This architecture is ideal for processes with clearly defined, ordered stages.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Sequential","Pipeline"],tags:["sequential","pipeline","linear","staged-processing"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Basic Sequential - Linear pipeline A → B → C"},useCases:["Data Processing Pipeline: retrieve raw data → clean/format → enrich → generate report","Email Campaign: draft → personalize → schedule and send","Document Translation and Summarization: translate → summarize"],performance:{scalability:7,complexity:3,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.madebyagents.com/blog/multi-agent-architectures",visual:{name:"My Architecture",type:"microservices",components:[{id:"api-gateway",type:"input",position:{x:132.33333333333334,y:206},label:"User Input",color:"#53d5fd"},{id:"user-service",type:"agent",position:{x:412.66666666666663,y:208},label:"Agent 1",color:"#fffbb9"},{id:"database",type:"agent",position:{x:663.3333333333333,y:208},label:"Agent 2",color:"#fffbb9"}],connections:[{id:"conn-1",from:"api-gateway",to:"user-service",type:"http",name:"Request"},{id:"conn-2",from:"user-service",to:"database",type:"query",name:"files"}]}},{id:"network-decentralized",title:"Network (Decentralized) Architecture",description:"Agents communicate directly without a central coordinator for flexible, dynamic collaboration.",longDescription:"In a network or decentralized architecture, agents communicate directly with each other without a central coordinator. This enables flexible and dynamic collaboration, as any agent can interact with any other agent in the network. It is well-suited for complex problems where workflows are not predictable and require dynamic information sharing.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Distributed","Decentralized"],tags:["p2p","decentralized","network","collaboration"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Network/Decentralized - Mesh-like peer-to-peer agent connections"},useCases:["Supply Chain Management: suppliers ↔ manufacturers ↔ distributors ↔ retailers coordinate directly","Smart Home Systems: thermostats ↔ lights ↔ cameras interact for automation","Collaborative Design: UI, backend, and database agents share updates directly"],performance:{scalability:9,complexity:7,reliability:7},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.madebyagents.com/blog/multi-agent-architectures",visual:{name:"My Architecture",type:"microservices",components:[{id:"api-gateway",type:"agent",position:{x:573.9999999999999,y:101.16666666666669},label:"Agent 1",color:"#ffe4a8"},{id:"user-service",type:"agent",position:{x:567.9999999999999,y:385.3333333333333},label:"Agent 3",color:"#ffe4a8"},{id:"component-1754477351230-pojquwej0",type:"agent",position:{x:242.99999999999994,y:383.16666666666663},label:"Agent 4",color:"#ffe4a8"},{id:"component-1754477352919-cbv8kme0s",type:"agent",position:{x:231.25,y:100.58333333333334},label:"Agent 2",color:"#ffe4a8"}],connections:[{id:"conn-1",from:"api-gateway",to:"user-service",type:"http",name:""},{id:"conn-1754477435796-8f55bmvzx",name:"",from:"api-gateway",to:"component-1754477352919-cbv8kme0s",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477441239-lpobqfg2q",name:"",from:"api-gateway",to:"component-1754477351230-pojquwej0",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477471096-32o5nyg1g",name:"",from:"component-1754477352919-cbv8kme0s",to:"component-1754477351230-pojquwej0",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477473708-o96ajmat6",name:"",from:"component-1754477352919-cbv8kme0s",to:"api-gateway",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477481023-3hxz8hgb7",name:"",from:"component-1754477352919-cbv8kme0s",to:"user-service",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477492126-fd48xisih",name:"",from:"component-1754477351230-pojquwej0",to:"component-1754477352919-cbv8kme0s",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477496023-t53i61gx2",name:"",from:"component-1754477351230-pojquwej0",to:"api-gateway",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477498767-r7v7wz3mi",name:"",from:"component-1754477351230-pojquwej0",to:"user-service",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477504656-slq8mofc2",name:"",from:"user-service",to:"api-gateway",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477508893-3dqwky3wq",name:"",from:"user-service",to:"component-1754477352919-cbv8kme0s",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754477514817-d9pxutvhw",name:"",from:"user-service",to:"component-1754477351230-pojquwej0",type:"custom",fromCorner:"auto",toCorner:"auto"}]}},{id:"market-based-bidding",title:"Market-Based (Bidding) Architecture",description:"Auctioneer broadcasts tasks; contractor agents bid; best bid wins based on predefined criteria.",longDescription:"In a market-based architecture, tasks are not assigned directly. A Client or Auctioneer agent broadcasts a task to a network of Contractor agents, which then bid on the task with capability, confidence, or cost. The Auctioneer selects the best bid based on criteria such as lowest cost, highest confidence, or fastest completion time, and awards the task to the winning agent.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Competitive","Market"],tags:["bidding","auction","market-based","allocation","contract-net"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Market-Based Bidding - Auctioneer broadcasting, contractors bidding, winner awarded"},useCases:["Dynamic Resource Allocation: VMs bid to run a task based on current load/capabilities","Decentralized Task Routing: travel planning sub-tasks bid by specialized agents","E-commerce and Supply Chains: shippers bid for delivery with cheapest/fastest selection"],performance:{scalability:9,complexity:6,reliability:8},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.madebyagents.com/blog/multi-agent-architectures",visual:{name:"Market-Based (Bidding) Architecture",type:"bidding",components:[{id:"client-agent",type:"agent",position:{x:68.5,y:191.5},label:"Client Agent",color:"#53d5fd"},{id:"auctioneer-agent",type:"agent",position:{x:317.5,y:318.25},label:"Auctioneer Agent",color:"#fffbb9"},{id:"contractor-a",type:"agent",position:{x:302,y:48},label:"Contractor A",color:"#fffbb9"},{id:"contractor-b",type:"agent",position:{x:821,y:186.5},label:"Contractor B (Winner)",color:"#c4ffc4"},{id:"contractor-c",type:"agent",position:{x:297,y:493},label:"Contractor C",color:"#fffbb9"}],connections:[{id:"conn-1",from:"client-agent",to:"auctioneer-agent",type:"request",name:"Announce Task"},{id:"conn-2",from:"auctioneer-agent",to:"contractor-a",type:"broadcast",name:"Call for Bids"},{id:"conn-3",from:"auctioneer-agent",to:"contractor-b",type:"broadcast",name:"Call for Bids"},{id:"conn-4",from:"auctioneer-agent",to:"contractor-c",type:"broadcast",name:"Call for Bids"},{id:"conn-5",from:"contractor-a",to:"auctioneer-agent",type:"bid",name:"Submit Bid"},{id:"conn-6",from:"contractor-b",to:"auctioneer-agent",type:"bid",name:"Submit Bid"},{id:"conn-7",from:"contractor-c",to:"auctioneer-agent",type:"bid",name:"Submit Bid"},{id:"conn-8",from:"auctioneer-agent",to:"contractor-b",type:"award",name:"Award Task"},{id:"conn-9",from:"contractor-b",to:"client-agent",type:"result",name:"Task Result"}]}},{id:"hierarchical-architecture",title:"Hierarchical Architecture",description:"Multi-level supervision where top-level supervisors manage lower-level supervisors who manage worker agents.",longDescription:"A hierarchical architecture is an extension of the supervisor model, featuring multiple levels of supervision. A top-level supervisor oversees lower-level supervisors, each managing their own team of worker agents. This structure enables handling complex tasks by decomposing them into smaller, manageable sub-problems that specialized teams can address.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Hierarchical","Orchestration"],tags:["hierarchical","supervisor","multi-level","orchestration"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Hierarchical Architecture - Top supervisor overseeing sub-supervisors, each with worker agents"},useCases:["Large-Scale Project Management: top manager → department leads → team agents","Complex Research Tasks: primary research → sub-topic supervisors → specialized teams","Running a Virtual Company: CEO → executives (CTO/CPO/...) → department teams"],performance:{scalability:8,complexity:8,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.madebyagents.com/blog/multi-agent-architectures",visual:{name:"My Architecture",type:"microservices",components:[{id:"component-1754478515905-x7kmhpjrr",type:"supervisor",position:{x:473,y:163},label:"Agent Supervisor",color:"#e392fe"},{id:"component-1754478568308-mpewau0fu",type:"supervisor",position:{x:606,y:311},label:"Sub-Supervisor 2",color:"#a8c6fe"},{id:"component-1754478569850-9bca171r7",type:"supervisor",position:{x:348,y:305},label:"Sub-Supervisor 1",color:"#a8c6fe"},{id:"component-1754478632540-26d27ye8m",type:"agent",position:{x:179,y:485},label:"Agent 1a",color:"#fffbb9"},{id:"component-1754478637259-uxvouazwt",type:"agent",position:{x:784,y:493},label:"Agent 2b",color:"#fffbb9"},{id:"component-1754478639394-xiyyfzbuq",type:"agent",position:{x:600,y:490},label:"Agent 2a",color:"#fffbb9"},{id:"component-1754478640661-cjcbkddb9",type:"agent",position:{x:372,y:488},label:"Agent 1b",color:"#fffbb9"}],connections:[{id:"conn-1754478587717-sknyz25m9",name:"Supervises",from:"component-1754478515905-x7kmhpjrr",to:"component-1754478569850-9bca171r7",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754478601462-bxianbwjj",name:"Supervises",from:"component-1754478515905-x7kmhpjrr",to:"component-1754478568308-mpewau0fu",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754478688837-wqqo3mwgx",name:"Delegates",from:"component-1754478569850-9bca171r7",to:"component-1754478640661-cjcbkddb9",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754478727436-4h8i8ji4v",name:"Delegates",from:"component-1754478569850-9bca171r7",to:"component-1754478632540-26d27ye8m",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754478737288-b3n25r73o",name:"Delegates",from:"component-1754478568308-mpewau0fu",to:"component-1754478639394-xiyyfzbuq",type:"custom",fromCorner:"auto",toCorner:"auto"},{id:"conn-1754478756704-mcdtbdj6o",name:"Delegates",from:"component-1754478568308-mpewau0fu",to:"component-1754478637259-uxvouazwt",type:"custom",fromCorner:"auto",toCorner:"auto"}]}},{id:"tool-augmented-agent-network",title:"Tool-Augmented Agent Network",description:"Agents are designed to interact with external tools (APIs, databases, code interpreters) to ground reasoning and perform real-world actions.",longDescription:'In a Tool-Augmented architecture, agents are not limited to communicating with each other; they are explicitly designed to interact with a set of external, non-agentive "tools." These tools can be anything from code interpreters and calculators to databases and third-party APIs (e.g., Google Search, weather services). An orchestrating agent, or the agents themselves, can reason about which tool is required to accomplish a specific sub-task. This dramatically extends the agent system\'s capabilities beyond its inherent knowledge, allowing it to ground its reasoning in real-world data and perform complex actions. This is a foundational architecture for most modern, practical AI agent systems.',author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Tool-Augmented","Orchestration"],tags:["tools","apis","databases","react","toolformer","grounding"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Tool-Augmented Agent Network - Orchestrator agent invoking external tools and producing final result"},useCases:["Advanced Research and Analysis: Use Web Search to find sources, Web Scraper to extract data, and Code Interpreter with pandas to analyze.","Automated Software Development: Use File System to write code, Terminal to run tests, and Git to commit changes.","Intelligent Personal Assistants: Use Calendar API to schedule, Maps API for directions, and Email API to send invites."],performance:{scalability:8,complexity:6,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.madebyagents.com/blog/multi-agent-architectures",visual:{name:"Tool-Augmented Agent Network",type:"tool-augmented",components:[{id:"user-goal",type:"input",position:{x:50,y:250},label:"User Goal",color:"#53d5fd"},{id:"orchestrator-agent",type:"agent",position:{x:250,y:250},label:"Orchestrator Agent",color:"#fffbb9"},{id:"web-search-tool",type:"tool",position:{x:500,y:100},label:"Web Search API",color:"#d1b3ff"},{id:"code-interpreter-tool",type:"tool",position:{x:500,y:250},label:"Code Interpreter",color:"#d1b3ff"},{id:"database-tool",type:"tool",position:{x:500,y:400},label:"Database",color:"#d1b3ff"},{id:"final-result",type:"output",position:{x:750,y:250},label:"Final Result",color:"#96fdb2"}],connections:[{id:"conn-1",from:"user-goal",to:"orchestrator-agent",type:"request",name:"Goal"},{id:"conn-2",from:"orchestrator-agent",to:"web-search-tool",type:"api-call",name:"Uses Tool"},{id:"conn-3",from:"orchestrator-agent",to:"code-interpreter-tool",type:"api-call",name:"Uses Tool"},{id:"conn-4",from:"orchestrator-agent",to:"database-tool",type:"api-call",name:"Uses Tool"},{id:"conn-5",from:"orchestrator-agent",to:"final-result",type:"result",name:"Output"}]}},{id:"critic-refinement-loop",title:"Critic & Refinement Loop Architecture",description:"Creator agent produces output; Critic reviews and provides feedback; loop continues until approval or iteration limit.",longDescription:'This architecture introduces a "Critic" agent whose sole purpose is to review the output of a "Creator" agent and provide constructive feedback. The Creator agent then takes this feedback and refines its work in a loop until the output meets a certain quality standard, is approved by the Critic, or a maximum number of iterations is reached. This pattern is fundamental for improving the quality and accuracy of generated content or plans.',author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Iterative","Quality"],tags:["critic","refinement","feedback-loop","review"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Critic & Refinement Loop - Creator and Critic in a feedback loop until approval"},useCases:['Code Generation: A "Developer" agent writes code, and a "Code Reviewer" agent checks for bugs, style violations, and inefficiencies. The Developer agent then refixes the code based on the feedback.','High-Quality Content Creation: A "Writer" agent drafts an article, and an "Editor" agent checks for factual accuracy, tone, and grammatical errors. The writer then revises the draft.','Automated Scientific Discovery: A "Hypothesis" agent proposes a theory, and a "Validator" agent designs an experiment to test it, providing feedback that refines the hypothesis.'],performance:{scalability:7,complexity:5,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.madebyagents.com/blog/multi-agent-architectures",visual:{name:"Critic & Refinement Loop Architecture",type:"refinement-loop",components:[{id:"initial-task",type:"input",position:{x:103,y:152},label:"Initial Task",color:"#53d5fd"},{id:"creator-agent",type:"agent",position:{x:338,y:152},label:"Creator Agent",color:"#fffbb9"},{id:"critic-agent",type:"agent",position:{x:320,y:340},label:"Critic Agent",color:"#fffbb9"},{id:"final-output",type:"output",position:{x:600,y:340},label:"Final Output",color:"#96fdb2"}],connections:[{id:"conn-1",from:"initial-task",to:"creator-agent",type:"request",name:"Generate"},{id:"conn-2",from:"creator-agent",to:"critic-agent",type:"dataflow",name:"Initial Draft"},{id:"conn-3",from:"critic-agent",to:"creator-agent",type:"feedback",name:"Feedback & Refinements"},{id:"conn-4",from:"critic-agent",to:"final-output",type:"approval",name:"Final Approval"}]}},{id:"human-in-the-loop",title:"Human-in-the-Loop (HITL) Architecture",description:"Autonomous agents collaborate with humans at critical checkpoints for approval, judgment, or handling sensitive actions.",longDescription:"Human-in-the-Loop (HITL) is a design pattern that strategically combines human intelligence with AI automation. The multi-agent system operates autonomously but pauses and consults a human at critical junctures. Triggers for intervention include low confidence, subjective judgment, sensitive data handling, or final approval for irreversible actions. HITL leverages human common sense, ethics, and creativity together with machine speed and data processing to produce robust, safe, and trustworthy outcomes.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Safety","Governance","Workflow"],tags:["human-in-the-loop","approval","review","oversight","safety"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"HITL - Autonomous agent requests human approval before final action"},useCases:["Medical Diagnosis: AI suggests diagnosis; clinician reviews and confirms before treatment.","High-Stakes Financial Transactions: System proposes significant trade; human analyst must approve to execute.","Content Moderation: Agents flag content; human moderator makes final decision to reduce false positives."],performance:{scalability:7,complexity:5,reliability:10},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.ibm.com/think/topics/human-in-the-loop",visual:{name:"Human-in-the-Loop Architecture",type:"human-in-the-loop",components:[{id:"start-task",type:"input",position:{x:50,y:250},label:"Start Task",color:"#53d5fd"},{id:"agent-1",type:"agent",position:{x:250,y:250},label:"Automated Agent",color:"#fffbb9"},{id:"human-review",type:"human",position:{x:500,y:250},label:"Human Review",color:"#ffb3ba"},{id:"final-action",type:"output",position:{x:750,y:250},label:"Final Action",color:"#96fdb2"}],connections:[{id:"conn-1",from:"start-task",to:"agent-1",type:"dataflow",name:"Process"},{id:"conn-2",from:"agent-1",to:"human-review",type:"request",name:"Needs Approval / Low Confidence"},{id:"conn-3",from:"human-review",to:"agent-1",type:"feedback",name:"Reject / Modify"},{id:"conn-4",from:"human-review",to:"final-action",type:"approval",name:"Approve & Execute"}]}},{id:"foraging-architecture",title:"Foraging Architecture",description:"Decentralized swarm of forager agents explore broadly; discoveries attract others to exploit rich areas.",longDescription:'The Foraging Architecture is a decentralized pattern inspired by the natural behavior of social insects like ants or bees. Multiple independent agents ("foragers") explore a large search space (e.g., the internet, a database, a file system) in parallel to find specific information or resources. When a forager agent finds a valuable resource, it communicates this discovery back to the swarm—often including the "scent" or location—attracting other agents to exploit it more thoroughly. This creates an efficient, self-organizing search-and-exploitation mechanism that excels at finding needles in a haystack.',author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Distributed","Swarm"],tags:["foraging","swarm-intelligence","ant-colony","explore-exploit","decentralized"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Foraging Architecture - Multiple forager agents exploring and converging on a rich resource"},useCases:["Distributed Web Scraping: Many agents crawl; rich sources attract more crawlers.","Cybersecurity Threat Hunting: Agents search for IOCs; detections attract focused analysis.","Scientific Discovery: Agents scan massive datasets; significant anomalies get swarmed for validation."],performance:{scalability:10,complexity:6,reliability:8},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://www.sciencedirect.com/book/9781558605954/swarm-intelligence",visual:{name:"Foraging Architecture",type:"foraging",components:[{id:"search-space",type:"input",position:{x:50,y:250},label:"Large Search Space (e.g., Web)",color:"#53d5fd"},{id:"forager-1",type:"agent",position:{x:300,y:100},label:"Forager Agent 1",color:"#fffbb9"},{id:"forager-2",type:"agent",position:{x:300,y:250},label:"Forager Agent 2",color:"#fffbb9"},{id:"forager-3",type:"agent",position:{x:300,y:400},label:"Forager Agent 3",color:"#fffbb9"},{id:"resource-found",type:"tool",position:{x:550,y:175},label:"Valuable Resource Found",color:"#d1b3ff"},{id:"results-pool",type:"output",position:{x:800,y:250},label:"Aggregated Results",color:"#96fdb2"}],connections:[{id:"conn-1",from:"search-space",to:"forager-1",type:"search",name:"Explore"},{id:"conn-2",from:"search-space",to:"forager-2",type:"search",name:"Explore"},{id:"conn-3",from:"search-space",to:"forager-3",type:"search",name:"Explore"},{id:"conn-4",from:"forager-1",to:"resource-found",type:"discovery",name:"Finds Resource"},{id:"conn-5",from:"resource-found",to:"forager-2",type:"signal",name:"Signal Scent"},{id:"conn-6",from:"resource-found",to:"forager-3",type:"signal",name:"Signal Scent"},{id:"conn-7",from:"forager-1",to:"results-pool",type:"report",name:"Report Data"},{id:"conn-8",from:"forager-2",to:"results-pool",type:"report",name:"Report Data"},{id:"conn-9",from:"forager-3",to:"results-pool",type:"report",name:"Report Data"}]}},{id:"group-architecture",title:"Group Architecture",description:"Agents organized into teams with rich intra-group communication and structured inter-group coordination via liaisons.",longDescription:"A Group Architecture (also called Team-based or Coalition) organizes agents into subgroups. Within a group, communication is fluid and context-rich (all-to-all or local broadcast). Between groups, communication is structured and less frequent, typically handled by designated liaison/leader agents. This enables specialization per group while reducing system-wide communication overhead and information overload.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Collaborative","Structured"],tags:["group","team","coalition","liaison","coordination"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Group Architecture - Teams with internal dense communication and inter-team liaison links"},useCases:["Software Engineering (Virtual Company): Frontend, Backend, and QA teams collaborate internally; team leads integrate across teams.","Complex Research Reports: Data Collection, Analysis, and Report Writing teams work in parallel; leaders synthesize the final report.","Robotics Control: Mapping team and Retrieval team coordinate via liaisons for mission objectives."],performance:{scalability:8,complexity:6,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/#group-chat",visual:{name:"Group Architecture",type:"group",components:[{id:"main-task",type:"input",position:{x:450,y:50},label:"Complex Problem",color:"#53d5fd"},{id:"frontend-agent-1",type:"agent",position:{x:100,y:200},label:"Frontend Agent 1",color:"#add8e6"},{id:"frontend-agent-2",type:"agent",position:{x:100,y:300},label:"Frontend Agent 2",color:"#add8e6"},{id:"backend-agent-1",type:"agent",position:{x:800,y:200},label:"Backend Agent 1",color:"#f08080"},{id:"backend-agent-2",type:"agent",position:{x:800,y:300},label:"Backend Agent 2",color:"#f08080"},{id:"liaison-frontend",type:"agent",position:{x:350,y:250},label:"Frontend Lead",color:"#add8e6"},{id:"liaison-backend",type:"agent",position:{x:550,y:250},label:"Backend Lead",color:"#f08080"}],connections:[{id:"conn-1",from:"main-task",to:"liaison-frontend",type:"delegation",name:"Task"},{id:"conn-2",from:"main-task",to:"liaison-backend",type:"delegation",name:"Task"},{id:"conn-3",from:"liaison-frontend",to:"frontend-agent-1",type:"communication",name:"Group Chat"},{id:"conn-4",from:"liaison-frontend",to:"frontend-agent-2",type:"communication",name:"Group Chat"},{id:"conn-5",from:"frontend-agent-1",to:"frontend-agent-2",type:"communication",name:"Peer Talk"},{id:"conn-6",from:"liaison-backend",to:"backend-agent-1",type:"communication",name:"Group Chat"},{id:"conn-7",from:"liaison-backend",to:"backend-agent-2",type:"communication",name:"Group Chat"},{id:"conn-8",from:"backend-agent-1",to:"backend-agent-2",type:"communication",name:"Peer Talk"},{id:"conn-9",from:"liaison-frontend",to:"liaison-backend",type:"coordination",name:"API Sync"}]}},{id:"mixture-of-agents",title:"Mixture of Agents",description:"Heterogeneous agents with different specializations collaborate via an orchestrator to solve complex problems.",longDescription:"A Mixture of Agents architecture is fundamentally about heterogeneity. It involves creating a system where agents with different specializations, capabilities, underlying models, or even programming languages are combined to solve a complex problem. Instead of relying on a team of identical agents, this model leverages the idea that diverse expertise leads to a more robust and powerful solution. The core challenge lies in creating a communication and coordination protocol that allows these disparate agents to work together effectively.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Heterogeneous","Orchestration","Ensemble"],tags:["mixture-of-agents","heterogeneous","specialization","coordination","orchestrator"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Mixture of Agents - Orchestrator coordinating heterogeneous specialist agents"},useCases:["Financial Forecasting: Quantitative Analyst + News Analyst (NLP) + Risk Assessment combine signals.","Complex Problem-Solving: Creative Brainstormer + Logical Validator + Planner iterate to a plan.","Product Design: User Researcher analyzes feedback + UI/UX Designer proposes mockups + Technical Architect assesses feasibility."],performance:{scalability:8,complexity:7,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://huggingface.co/blog/moe",visual:{name:"Mixture of Agents",type:"heterogeneous",components:[{id:"problem-input",type:"input",position:{x:50,y:250},label:"Complex Problem",color:"#53d5fd"},{id:"orchestrator",type:"agent",position:{x:300,y:250},label:"Orchestrator",color:"#fffbb9"},{id:"nlp-agent",type:"agent",position:{x:550,y:100},label:"NLP Specialist Agent",color:"#c1ffc1"},{id:"vision-agent",type:"agent",position:{x:550,y:250},label:"Computer Vision Agent",color:"#add8e6"},{id:"data-agent",type:"agent",position:{x:550,y:400},label:"Data Analyst Agent",color:"#f08080"},{id:"final-solution",type:"output",position:{x:800,y:250},label:"Synthesized Solution",color:"#96fdb2"}],connections:[{id:"conn-1",from:"problem-input",to:"orchestrator",type:"request",name:"Solve"},{id:"conn-2",from:"orchestrator",to:"nlp-agent",type:"query",name:"Analyze text"},{id:"conn-3",from:"orchestrator",to:"vision-agent",type:"query",name:"Analyze image"},{id:"conn-4",from:"orchestrator",to:"data-agent",type:"query",name:"Analyze data"},{id:"conn-5",from:"nlp-agent",to:"orchestrator",type:"response",name:"Text insights"},{id:"conn-6",from:"vision-agent",to:"orchestrator",type:"response",name:"Image insights"},{id:"conn-7",from:"data-agent",to:"orchestrator",type:"response",name:"Data insights"},{id:"conn-8",from:"orchestrator",to:"final-solution",type:"result",name:"Finalize"}]}},{id:"concurrent-workflows",title:"Concurrent Workflows",description:"Multiple agents work on the same task in parallel, coordinating while processing independently to reduce total time.",longDescription:"The concurrent pattern enables multiple agents to work on the same task in parallel. Each agent processes the input independently, allowing for simultaneous execution of different aspects of a complex task. This architecture maximizes efficiency by leveraging parallelism, where agents coordinate their efforts while working concurrently to achieve a common goal, significantly reducing overall processing time.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Concurrent","Parallel"],tags:["parallelism","concurrency","coordinator","aggregation"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Concurrent Workflows - Coordinator dispatches to parallel agents, aggregator collects results"},useCases:["Parallel Content Generation: multiple writers produce sections simultaneously and merge results","Data Enrichment: run different enrichment models in parallel (NER, sentiment, categorization)","Multimodal Analysis: parallel agents analyze text, image, and structured data concurrently"],performance:{scalability:9,complexity:4,reliability:8},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://devblogs.microsoft.com/semantic-kernel/semantic-kernel-multi-agent-orchestration/",visual:{name:"Concurrent Workflows",type:"concurrent",components:[{id:"coordinator",type:"coordinator",position:{x:300,y:100},label:"Task Coordinator",color:"#ef4444"},{id:"agent-a",type:"worker",position:{x:100,y:250},label:"Agent A",color:"#22c55e"},{id:"agent-b",type:"worker",position:{x:250,y:250},label:"Agent B",color:"#22c55e"},{id:"agent-c",type:"worker",position:{x:400,y:250},label:"Agent C",color:"#22c55e"},{id:"agent-d",type:"worker",position:{x:550,y:250},label:"Agent D",color:"#22c55e"},{id:"aggregator",type:"aggregator",position:{x:300,y:400},label:"Result Aggregator",color:"#3b82f6"}],connections:[{id:"conn-1",from:"coordinator",to:"agent-a",type:"parallel",name:"Task A"},{id:"conn-2",from:"coordinator",to:"agent-b",type:"parallel",name:"Task B"},{id:"conn-3",from:"coordinator",to:"agent-c",type:"parallel",name:"Task C"},{id:"conn-4",from:"coordinator",to:"agent-d",type:"parallel",name:"Task D"},{id:"conn-5",from:"agent-a",to:"aggregator",type:"result",name:"Result A"},{id:"conn-6",from:"agent-b",to:"aggregator",type:"result",name:"Result B"},{id:"conn-7",from:"agent-c",to:"aggregator",type:"result",name:"Result C"},{id:"conn-8",from:"agent-d",to:"aggregator",type:"result",name:"Result D"}]}},{id:"agent-rearrange",title:"Agent Rearrange",description:"Agents dynamically add, remove, or adapt based on changing tasks and performance signals while preserving overall system integrity.",longDescription:"Multi-agent systems can adjust to varying environments by adding, removing or adapting agents in dynamic configurations. In this architecture, agents continuously rearrange themselves based on changing task requirements, environmental conditions, and system performance metrics. Prioritize modular components that can be reconfigured independently without compromising system integrity. This approach enables individual agents to evolve while preserving collective functionality.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Dynamic","Adaptive"],tags:["dynamic","rearrange","orchestrator","monitoring","agent-pool"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Agent Rearrange - Orchestrator dynamically provisions agents from a pool based on monitoring feedback"},useCases:["Variable Load Production: scale agents up/down from a pool based on throughput/latency targets","Self-Healing Pipelines: replace underperforming or failing agents on the fly","Context-Sensitive Tasks: dynamically introduce specialists when signals indicate new requirements"],performance:{scalability:9,complexity:6,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://galileo.ai/blog/stability-strategies-dynamic-multi-agents",visual:{name:"Agent Rearrange",type:"dynamic",components:[{id:"orchestrator",type:"orchestrator",position:{x:300,y:100},label:"Dynamic Orchestrator",color:"#ef4444"},{id:"agent-pool",type:"pool",position:{x:150,y:250},label:"Agent Pool",color:"#64748b"},{id:"active-agent-1",type:"active",position:{x:300,y:250},label:"Active Agent 1",color:"#22c55e"},{id:"active-agent-2",type:"active",position:{x:450,y:250},label:"Active Agent 2",color:"#22c55e"},{id:"monitor",type:"monitor",position:{x:300,y:400},label:"Performance Monitor",color:"#3b82f6"}],connections:[{id:"conn-1",from:"orchestrator",to:"active-agent-1",type:"assignment",name:"Task Assignment"},{id:"conn-2",from:"orchestrator",to:"active-agent-2",type:"assignment",name:"Task Assignment"},{id:"conn-3",from:"agent-pool",to:"orchestrator",type:"dynamic",name:"Agent Provisioning"},{id:"conn-4",from:"monitor",to:"orchestrator",type:"feedback",name:"Performance Data"},{id:"conn-5",from:"active-agent-1",to:"monitor",type:"reporting",name:"Status Report"},{id:"conn-6",from:"active-agent-2",to:"monitor",type:"reporting",name:"Status Report"}]}},{id:"graph-workflow",title:"Graph Workflow (DAG)",description:"Agents are nodes and connections are edges; control flow is managed by edges and agents communicate by updating shared graph state.",longDescription:"In this approach, each agent is a node in the graph, and their connections are represented as an edge. The control flow is managed by edges, and they communicate by adding to the graph's state. This architecture represents complex workflows as directed acyclic graphs (DAG) where agents can have multiple dependencies and parallel execution paths, enabling sophisticated coordination patterns that go beyond simple sequential or hierarchical structures.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Graph","Workflow","DAG"],tags:["graph","dag","control-flow","dependencies","parallel"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Graph Workflow - DAG of agents with converging and parallel paths"},useCases:["Complex CI/CD Pipelines: validation and security checks gate business logic; branches join later nodes","Data Processing DAGs: multiple preprocessing paths converge into transformation and formatting nodes","Enterprise Workflows: approval chains and logging run in parallel and merge to finalization"],performance:{scalability:9,complexity:7,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",documentationUrl:"https://blog.langchain.com/langgraph-multi-agent-workflows/",visual:{name:"Graph Workflow",type:"graph",components:[{id:"start-node",type:"start",position:{x:100,y:200},label:"Start",color:"#10b981"},{id:"agent-1",type:"processor",position:{x:250,y:100},label:"Data Validator",color:"#3b82f6"},{id:"agent-2",type:"processor",position:{x:250,y:300},label:"Security Checker",color:"#8b5cf6"},{id:"agent-3",type:"processor",position:{x:400,y:200},label:"Business Logic",color:"#06b6d4"},{id:"agent-4",type:"processor",position:{x:550,y:150},label:"Formatter",color:"#f59e0b"},{id:"agent-5",type:"processor",position:{x:550,y:250},label:"Logger",color:"#ef4444"},{id:"end-node",type:"end",position:{x:700,y:200},label:"End",color:"#dc2626"}],connections:[{id:"conn-1",from:"start-node",to:"agent-1",type:"flow",name:"Input Data"},{id:"conn-2",from:"start-node",to:"agent-2",type:"flow",name:"Security Check"},{id:"conn-3",from:"agent-1",to:"agent-3",type:"flow",name:"Valid Data"},{id:"conn-4",from:"agent-2",to:"agent-3",type:"flow",name:"Security OK"},{id:"conn-5",from:"agent-3",to:"agent-4",type:"flow",name:"Processed Data"},{id:"conn-6",from:"agent-3",to:"agent-5",type:"flow",name:"Log Data"},{id:"conn-7",from:"agent-4",to:"end-node",type:"flow",name:"Formatted Output"},{id:"conn-8",from:"agent-5",to:"end-node",type:"flow",name:"Log Complete"}]}},{id:"interactive-group-chat",title:"Interactive Group Chat",description:"An interactive group chat architecture facilitates collaboration among multiple specialized AI agents in a coordinated manner.",longDescription:"An interactive group chat architecture facilitates collaboration among multiple specialized AI agents in a coordinated manner. This system allows for dynamic speaker selection, mention-based communication where agents can be directed to specific tasks, and the ability for agents to build upon each other's responses. It supports both automated and interactive sessions, maintaining conversation history and context for coherent group reasoning.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Collaborative","Adaptive"],tags:["group-chat","dynamic-speaker-selection","mentions","interactive","context"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Interactive Group Chat - User ↔ Handler ↔ Coordinator with multiple agents and a conversation log"},useCases:["Dynamic group reasoning and collaborative problem solving","Mention-based routing of questions to specific agents","Maintaining conversational context across multi-agent sessions"],performance:{scalability:8,complexity:6,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/groupchats/interactive_groupchat/",visual:{name:"Interactive Group Chat Architecture",type:"interactive_group_chat",components:[{id:"user-interface",type:"interface",position:{x:100,y:300},label:"User Interface",color:"#fcd34d"},{id:"message-handler",type:"service",position:{x:350,y:300},label:"Message Handler",color:"#86efac"},{id:"agent-coordinator",type:"coordinator",position:{x:600,y:300},label:"Agent Coordinator",color:"#93c5fd"},{id:"agent-1",type:"agent",position:{x:850,y:150},label:"Agent 1",color:"#fca5a5"},{id:"agent-2",type:"agent",position:{x:850,y:300},label:"Agent 2",color:"#fca5a5"},{id:"agent-3",type:"agent",position:{x:850,y:450},label:"Agent 3",color:"#fca5a5"},{id:"conversation-log",type:"database",position:{x:600,y:50},label:"Conversation Log",color:"#e5e7eb"}],connections:[{id:"igc-conn-1",from:"user-interface",to:"message-handler",type:"websocket",name:"User Message"},{id:"igc-conn-2",from:"message-handler",to:"agent-coordinator",type:"rpc",name:"Process Message"},{id:"igc-conn-3",from:"agent-coordinator",to:"agent-1",type:"task",name:"Assign Task"},{id:"igc-conn-4",from:"agent-coordinator",to:"agent-2",type:"task",name:"Assign Task"},{id:"igc-conn-5",from:"agent-coordinator",to:"agent-3",type:"task",name:"Assign Task"},{id:"igc-conn-6",from:"agent-1",to:"message-handler",type:"response",name:"Agent Response"},{id:"igc-conn-7",from:"agent-2",to:"message-handler",type:"response",name:"Agent Response"},{id:"igc-conn-8",from:"agent-3",to:"message-handler",type:"response",name:"Agent Response"},{id:"igc-conn-9",from:"message-handler",to:"user-interface",type:"websocket",name:"Display Message"},{id:"igc-conn-10",from:"message-handler",to:"conversation-log",type:"log",name:"Log Message"}]}},{id:"agent-registry",title:"Agent Registry",description:"An agent registry is a centralized architecture for managing a collection of agents. It provides functionalities to add, delete, update, and retrieve agents, ensuring that agent definitions are decoupled from their execution.",longDescription:"An agent registry is a centralized architecture for managing a collection of agents. It provides functionalities to add, delete, update, and retrieve agents, ensuring that agent definitions are decoupled from their execution. This system is designed for concurrent environments, making it suitable for dynamic and scalable multi-agent systems where agents need to be discovered and invoked at runtime.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Orchestration","Infrastructure"],tags:["registry","service-discovery","crud","decoupled","runtime-invocation"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Agent Registry - API Endpoint, Registry Logic, Agent Datastore, External Service"},useCases:["Agent CRUD operations via centralized API","Runtime discovery and invocation of agents","Decoupling agent definitions from execution backends"],performance:{scalability:9,complexity:5,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/storage/agent_registry/",visual:{name:"Agent Registry Architecture",type:"agent_registry",components:[{id:"api-endpoint",type:"endpoint",position:{x:100,y:250},label:"API Endpoint",color:"#fecaca"},{id:"registry-logic",type:"service",position:{x:350,y:250},label:"Registry Logic",color:"#c7e9b0"},{id:"agent-datastore",type:"database",position:{x:600,y:250},label:"Agent Datastore",color:"#a5d8f3"},{id:"external-service",type:"service",position:{x:350,y:50},label:"External Service",color:"#fde68a"}],connections:[{id:"ar-conn-1",from:"api-endpoint",to:"registry-logic",type:"http",name:"Agent Requests"},{id:"ar-conn-2",from:"registry-logic",to:"agent-datastore",type:"db-query",name:"CRUD Operations"},{id:"ar-conn-3",from:"external-service",to:"registry-logic",type:"api-call",name:"Invoke Agent"}]}},{id:"spreadsheet",title:"Spreadsheet Swarm",description:"Spreadsheet Swarm is a multi-agent architecture designed to manage and orchestrate thousands of agents using a CSV file.",longDescription:"Spreadsheet Swarm is a multi-agent architecture designed to manage and orchestrate thousands of agents using a CSV file. This system acts as a centralized collector for agent outputs, saving results in a structured tabular format for easy sorting, filtering, and analysis. It supports parallel processing by allowing multiple agents to run concurrently, making it scalable and efficient for large-scale data operations.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Tabular","Data Management"],tags:["spreadsheet","swarm","csv","parallel","orchestrator"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Spreadsheet Swarm - CSV input, orchestrator, agent pool, aggregator, CSV output"},useCases:["Large-scale CSV-driven task orchestration","Parallel agent execution with centralized output collection","Bulk data processing with structured result storage"],performance:{scalability:9,complexity:5,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/multi_agent_architectures/documentation/SpreadSheetSwarm/",visual:{name:"Spreadsheet Swarm Architecture",type:"spreadsheet_swarm",components:[{id:"input-csv",type:"file",position:{x:50,y:200},label:"Input CSV",color:"#bfdbfe"},{id:"swarm-orchestrator",type:"orchestrator",position:{x:250,y:200},label:"Swarm Orchestrator",color:"#fde047"},{id:"agent-pool",type:"pool",position:{x:500,y:200},label:"Agent Pool",color:"#a7f3d0"},{id:"worker-agent-1",type:"agent",position:{x:700,y:100},label:"Worker Agent",color:"#fecaca"},{id:"worker-agent-2",type:"agent",position:{x:700,y:200},label:"Worker Agent",color:"#fecaca"},{id:"worker-agent-n",type:"agent",position:{x:700,y:300},label:"Worker Agent N",color:"#fecaca"},{id:"output-aggregator",type:"aggregator",position:{x:900,y:200},label:"Output Aggregator",color:"#d8b4fe"},{id:"output-csv",type:"file",position:{x:1100,y:200},label:"Output CSV",color:"#bfdbfe"}],connections:[{id:"ss-conn-1",from:"input-csv",to:"swarm-orchestrator",type:"read",name:"Read Tasks"},{id:"ss-conn-2",from:"swarm-orchestrator",to:"agent-pool",type:"dispatch",name:"Dispatch Tasks"},{id:"ss-conn-3",from:"agent-pool",to:"worker-agent-1",type:"assign",name:"Assign Task"},{id:"ss-conn-4",from:"agent-pool",to:"worker-agent-2",type:"assign",name:"Assign Task"},{id:"ss-conn-5",from:"agent-pool",to:"worker-agent-n",type:"assign",name:"Assign Task"},{id:"ss-conn-6",from:"worker-agent-1",to:"output-aggregator",type:"result",name:"Task Result"},{id:"ss-conn-7",from:"worker-agent-2",to:"output-aggregator",type:"result",name:"Task Result"},{id:"ss-conn-8",from:"worker-agent-n",to:"output-aggregator",type:"result",name:"Task Result"},{id:"ss-conn-9",from:"output-aggregator",to:"output-csv",type:"write",name:"Write Results"}]}},{id:"heavy",title:"Heavy Architecture",description:"A high-performance architecture designed for handling intensive computational workloads by orchestrating multiple agents working on resource-heavy operations—perfect for large-scale data processing and high-throughput task execution.",longDescription:"A high-performance architecture designed for handling intensive computational workloads by orchestrating multiple agents working on resource-heavy operations—perfect for large-scale data processing and high-throughput task execution.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["High-Performance","Parallel","Orchestration"],tags:["high-performance","compute","load-balancing","optimization","aggregation","monitoring"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Heavy Architecture - Resource manager, load balancer, heavy agent pool, compute agents, monitor, optimizer, aggregator, final output"},useCases:["Large-scale data processing and high-throughput task execution","Distributed heavy computations with dynamic balancing and optimization","Batch processing pipelines with monitoring and feedback-driven tuning"],performance:{scalability:10,complexity:7,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Heavy Architecture",type:"heavy_computation",components:[{id:"resource-manager",type:"manager",position:{x:100,y:100},label:"Resource Manager",color:"#fde68a"},{id:"load-balancer",type:"router",position:{x:300,y:100},label:"Load Balancer",color:"#c7d2fe"},{id:"agent-pool",type:"pool",position:{x:500,y:100},label:"Heavy Agent Pool",color:"#a7f3d0"},{id:"compute-agent-1",type:"compute",position:{x:700,y:50},label:"Compute Agent 1",color:"#fef9c3"},{id:"compute-agent-2",type:"compute",position:{x:700,y:150},label:"Compute Agent 2",color:"#fef9c3"},{id:"resource-monitor",type:"monitor",position:{x:900,y:100},label:"Resource Monitor",color:"#fee2e2"},{id:"performance-optimizer",type:"optimizer",position:{x:1100,y:100},label:"Performance Optimizer",color:"#dbeafe"},{id:"result-aggregator",type:"aggregator",position:{x:1300,y:100},label:"Result Aggregator",color:"#ffedd5"},{id:"final-output",type:"output",position:{x:1500,y:100},label:"Final Output",color:"#ecfccb"}],connections:[{id:"conn-1",from:"resource-manager",to:"load-balancer",type:"control",name:"Allocate Resources"},{id:"conn-2",from:"load-balancer",to:"agent-pool",type:"distribute",name:"Dispatch Agents"},{id:"conn-3",from:"agent-pool",to:"compute-agent-1",type:"task",name:"Compute Task"},{id:"conn-4",from:"agent-pool",to:"compute-agent-2",type:"task",name:"Compute Task"},{id:"conn-5",from:"compute-agent-1",to:"resource-monitor",type:"report",name:"Usage Report"},{id:"conn-6",from:"compute-agent-2",to:"resource-monitor",type:"report",name:"Usage Report"},{id:"conn-7",from:"resource-monitor",to:"performance-optimizer",type:"feedback",name:"Optimize"},{id:"conn-8",from:"performance-optimizer",to:"result-aggregator",type:"aggregated",name:"Aggregate Results"},{id:"conn-9",from:"result-aggregator",to:"final-output",type:"deliver",name:"Produce Final Output"}]}},{id:"router",title:"Router",description:"Priority Rules and LangGraph-style routing: analyzes tasks and routes to optimal agents/architectures based on rules, load, availability, and performance.",longDescription:"Priority Rules: Pre-established rules or logic are used to settle disagreements. LangGraph: Multi-Agent Workflows and route tasks to appropriate agents. The Router architecture acts as an intelligent traffic director that analyzes incoming tasks and dynamically selects the most suitable architecture pattern or specific agents based on task characteristics, current system load, agent availability, and performance metrics. This pattern enables adaptive system behavior by choosing optimal processing paths.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Routing","Orchestration","Adaptive"],tags:["router","priority-rules","load-balancing","dynamic-routing","langgraph"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Router architecture with Intelligent Router, Analyzer, Load Balancer, Rules Engine, and target clusters"},useCases:["Front-door routing for multi-capability agent platforms (text vs. vision vs. analytics)","Policy-based arbitration where priority rules resolve conflicts between candidate handlers","Load-aware dispatch to balance throughput and latency across agent clusters","Meta-routing between entire architectures (e.g., send DAG-like tasks to Graph Workflow, content tasks to Pipeline)"],performance:{scalability:9,complexity:6,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://medium.com/@iamanraghuvanshi/agentic-ai-7-multi-agent-architectures-explained-how-ai-agents-collaborate-141c23e9117f",visual:{name:"Router",type:"routing",components:[{id:"intelligent-router",type:"router",position:{x:300,y:100},label:"Intelligent Router",color:"#ef4444"},{id:"task-analyzer",type:"analyzer",position:{x:150,y:200},label:"Task Analyzer",color:"#f59e0b"},{id:"load-balancer",type:"balancer",position:{x:450,y:200},label:"Load Balancer",color:"#f59e0b"},{id:"routing-rules",type:"rules",position:{x:300,y:250},label:"Routing Rules Engine",color:"#64748b"},{id:"nlp-cluster",type:"cluster",position:{x:100,y:400},label:"NLP Agent Cluster",color:"#22c55e"},{id:"vision-cluster",type:"cluster",position:{x:250,y:400},label:"Vision Agent Cluster",color:"#3b82f6"},{id:"analytics-cluster",type:"cluster",position:{x:400,y:400},label:"Analytics Cluster",color:"#8b5cf6"},{id:"workflow-cluster",type:"cluster",position:{x:550,y:400},label:"Workflow Cluster",color:"#06b6d4"}],connections:[{id:"conn-1",from:"intelligent-router",to:"task-analyzer",type:"analysis",name:"Task Analysis"},{id:"conn-2",from:"intelligent-router",to:"load-balancer",type:"load-query",name:"Load Check"},{id:"conn-3",from:"intelligent-router",to:"routing-rules",type:"rule-query",name:"Rule Evaluation"},{id:"conn-4",from:"intelligent-router",to:"nlp-cluster",type:"conditional",name:"NLP Tasks"},{id:"conn-5",from:"intelligent-router",to:"vision-cluster",type:"conditional",name:"Vision Tasks"},{id:"conn-6",from:"intelligent-router",to:"analytics-cluster",type:"conditional",name:"Analytics Tasks"},{id:"conn-7",from:"intelligent-router",to:"workflow-cluster",type:"conditional",name:"Complex Workflows"}]}},{id:"deep-research",title:"Deep Research",description:"Specialized architecture for comprehensive, multi-domain research with iterative planning, cross-validation, and synthesis.",longDescription:"A specialized architecture tailored for conducting comprehensive research across multiple domains. This approach uses iterative workflows where research queries trigger domain-specific agents, whose findings are aggregated, cross-validated, refined, and synthesized into a final report—optimal for academic research, market intelligence, and deep data investigation.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Research","Iterative","Synthesis"],tags:["research","planning","validation","synthesis","multi-domain"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Deep Research - Iterative multi-agent research with aggregation, validation, refinement, and synthesis"},implementation:{codeExample:"class DeepResearch {\n  constructor({ planner, domainAnalyzers, agents, validator, refiner, synthesizer, aggregator }) {\n    this.planner = planner;                   // plans research steps/sub-questions\n    this.domainAnalyzers = domainAnalyzers;   // maps domain -> analyzer\n    this.agents = agents;                     // maps domain -> agent array\n    this.validator = validator;               // cross-checks findings\n    this.refiner = refiner;                   // decides what to iterate on\n    this.synthesizer = synthesizer;           // produces final report\n    this.aggregator = aggregator || ((findings) => findings.flat());\n  }\n\n  async run(researchQuery, { maxLoops = 3 } = {}) {\n    // 1) Plan domains/sub-questions\n    const plan = await this.planner.createPlan(researchQuery);\n    // plan: [{ domain: 'finance', question }, { domain: 'academic', question }, ...]\n\n    // 2) Domain analysis: expand tasks per domain\n    const domainTasks = await Promise.all(plan.map(async (p) => {\n      const analyzer = this.domainAnalyzers[p.domain];\n      return analyzer ? await analyzer.expand(p) : [p];\n    }));\n    let tasks = domainTasks.flat();\n\n    // 3) Dispatch to domain-specific agents\n    const initialFindings = await Promise.all(tasks.map(async (t) => {\n      const pool = this.agents[t.domain] || [];\n      const results = await Promise.all(pool.map(a => a.research(t)));\n      return { task: t, results };\n    }));\n\n    // 4) Aggregate\n    let aggregated = this.aggregator(initialFindings);\n\n    // 5) Cross-validate and refinement loop\n    for (let i = 0; i &lt; maxLoops; i++) {\n      const validation = await this.validator.crossCheck(aggregated);\n      const refinePlan = await this.refiner.decide(validation, aggregated);\n      if (!refinePlan || refinePlan.length === 0) break;\n\n      const loopFindings = await Promise.all(refinePlan.map(async (t) => {\n        const pool = this.agents[t.domain] || [];\n        const results = await Promise.all(pool.map(a => a.research(t)));\n        return { task: t, results };\n      }));\n      aggregated = this.aggregator([...aggregated, ...loopFindings]);\n    }\n\n    // 6) Synthesize final report\n    return this.synthesizer.compose(aggregated, researchQuery);\n  }\n}",language:"javascript"},useCases:["Academic literature reviews and meta-analyses","Market intelligence and competitor analysis","Policy research and evidence synthesis","Technical due diligence and feasibility studies"],performance:{scalability:8,complexity:7,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Deep Research Architecture",type:"deep_research",components:[{id:"research-query",type:"input",position:{x:100,y:100},label:"Research Query",color:"#fde68a"},{id:"research-planner",type:"planner",position:{x:300,y:100},label:"Research Planner",color:"#c7d2fe"},{id:"domain-analysis",type:"analyzer",position:{x:500,y:100},label:"Domain Analysis",color:"#a7f3d0"},{id:"research-agent-1",type:"agent",position:{x:700,y:25},label:"Research Agent 1",color:"#fef9c3"},{id:"research-agent-2",type:"agent",position:{x:700,y:100},label:"Research Agent 2",color:"#fef9c3"},{id:"research-agent-n",type:"agent",position:{x:700,y:175},label:"Research Agent N",color:"#fef9c3"},{id:"initial-findings",type:"aggregator",position:{x:900,y:100},label:"Initial Findings",color:"#fee2e2"},{id:"cross-validation",type:"validator",position:{x:1100,y:100},label:"Cross-Validation",color:"#dbeafe"},{id:"refinement-loop",type:"loop",position:{x:1300,y:100},label:"Refinement Loop",color:"#dcfce7"},{id:"synthesis-agent",type:"synthesizer",position:{x:1500,y:100},label:"Synthesis Agent",color:"#f0f9ff"},{id:"comprehensive-report",type:"output",position:{x:1700,y:100},label:"Comprehensive Report",color:"#ffedd5"}],connections:[{id:"c1",from:"research-query",to:"research-planner",type:"plan",name:"Plan Research"},{id:"c2",from:"research-planner",to:"domain-analysis",type:"analyze",name:"Domain Analysis"},{id:"c3",from:"domain-analysis",to:"research-agent-1",type:"task",name:"Task Domain 1"},{id:"c4",from:"domain-analysis",to:"research-agent-2",type:"task",name:"Task Domain 2"},{id:"c5",from:"domain-analysis",to:"research-agent-n",type:"task",name:"Task Domain N"},{id:"c6",from:"research-agent-1",to:"initial-findings",type:"report",name:"Findings"},{id:"c7",from:"research-agent-2",to:"initial-findings",type:"report",name:"Findings"},{id:"c8",from:"research-agent-n",to:"initial-findings",type:"report",name:"Findings"},{id:"c9",from:"initial-findings",to:"cross-validation",type:"validate",name:"Cross-Check"},{id:"c10",from:"cross-validation",to:"refinement-loop",type:"refine",name:"Refine"},{id:"c11",from:"refinement-loop",to:"initial-findings",type:"loop",name:"Iterate"},{id:"c12",from:"refinement-loop",to:"synthesis-agent",type:"synthesize",name:"Synthesize Output"},{id:"c13",from:"synthesis-agent",to:"comprehensive-report",type:"deliver",name:"Deliver Report"}]}},{id:"de-hallucination",title:"De-Hallucination Architecture",description:"Consensus-based validation to minimize hallucinations: primary agent generates, multiple validators fact-check, consensus decides to accept or refine.",longDescription:"An architecture specifically crafted to minimize and eliminate hallucinations in AI-generated outputs using consensus-based validation. A primary agent produces an initial response, which is then fact-checked by multiple secondary validator agents. A consensus engine evaluates agreement among validations to either finalize the output (if confidence exceeds a threshold) or trigger a targeted refinement loop back to the primary agent.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Safety","Validation","Consensus"],tags:["de-hallucination","validation","consensus","confidence-scoring","refinement"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"De-Hallucination - Primary output validated by multiple fact-checkers, consensus decides accept/refine"},useCases:["Factual Q&A systems requiring high reliability","Medical/legal content assistants needing strict fact-checking","Code assistants validating outputs against tests or static analysis","Research assistants cross-validating sources before synthesis"],performance:{scalability:7,complexity:6,reliability:10},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"De-Hallucination Architecture",type:"de_hallucination",components:[{id:"input-query",type:"input",position:{x:100,y:100},label:"Input Query",color:"#fde68a"},{id:"primary-agent",type:"agent",position:{x:300,y:100},label:"Primary Agent",color:"#c7d2fe"},{id:"initial-response",type:"output",position:{x:500,y:100},label:"Initial Response",color:"#a7f3d0"},{id:"fact-check-agent-1",type:"validator",position:{x:700,y:25},label:"Fact-Check Agent 1",color:"#fef9c3"},{id:"fact-check-agent-2",type:"validator",position:{x:700,y:100},label:"Fact-Check Agent 2",color:"#fef9c3"},{id:"fact-check-agent-3",type:"validator",position:{x:700,y:175},label:"Fact-Check Agent 3",color:"#fef9c3"},{id:"consensus-engine",type:"consensus",position:{x:918,y:51},label:"Consensus Engine",color:"#fee2e2"},{id:"confidence-score",type:"score",position:{x:941,y:223},label:"Confidence Score",color:"#dbeafe"},{id:"validated-output",type:"output",position:{x:1184,y:122},label:"Validated Output",color:"#dcfce7"},{id:"refinement-loop",type:"loop",position:{x:687,y:315},label:"Request Refinement",color:"#f0f9ff"}],connections:[{id:"d1",from:"input-query",to:"primary-agent",type:"request",name:"Generate Response"},{id:"d2",from:"primary-agent",to:"initial-response",type:"output",name:"Initial Output"},{id:"d3",from:"initial-response",to:"fact-check-agent-1",type:"validate",name:"Validate 1"},{id:"d4",from:"initial-response",to:"fact-check-agent-2",type:"validate",name:"Validate 2"},{id:"d5",from:"initial-response",to:"fact-check-agent-3",type:"validate",name:"Validate 3"},{id:"d6",from:"fact-check-agent-1",to:"consensus-engine",type:"feed",name:"Feedback 1"},{id:"d7",from:"fact-check-agent-2",to:"consensus-engine",type:"feed",name:"Feedback 2"},{id:"d8",from:"fact-check-agent-3",to:"consensus-engine",type:"feed",name:"Feedback 3"},{id:"d9",from:"consensus-engine",to:"confidence-score",type:"evaluate",name:"Evaluate Consensus"},{id:"d10",from:"confidence-score",to:"validated-output",type:"deliver",name:"If Score > Threshold"},{id:"d11",from:"confidence-score",to:"refinement-loop",type:"loop",name:"If Score ≤ Threshold"},{id:"d12",from:"refinement-loop",to:"primary-agent",type:"request",name:"Refine Request"}]}},{id:"malt-architecture",title:"MALT (Multi-Agent Learning Task)",description:"Creator produces an initial solution; Verifiers independently evaluate; Refiners improve based on feedback; iterates to high-quality output.",longDescription:"Multi-Agent Learning Task (MALT) is a structured multi-agent framework in which a Creator Agent produces an initial solution, Verifier Agents evaluate it independently, and Refiner Agents enhance it based on feedback. This iterative process supports high-quality outputs for complex tasks such as mathematical proofs, translations, or content generation.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Iterative","Quality","Orchestration"],tags:["creator","verifier","refiner","feedback","iteration","malt"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"MALT - Creator → Verifiers → Refiners → Final Output with orchestrator and conversation manager"},useCases:["Mathematical Proofs: creator drafts proof, verifiers check steps, refiners fix gaps.","High-Quality Translation: creator translates, multiple verifiers check semantics/style, refiners polish.","Content Generation: creator writes draft, verifiers review for accuracy/tone, refiners enhance quality."],performance:{scalability:8,complexity:6,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/structs/malt/",visual:{name:"MALT Architecture",type:"malt",components:[{id:"user-task",type:"input",position:{x:100,y:100},label:"User Task",color:"#fde68a"},{id:"malt-orchestrator",type:"orchestrator",position:{x:300,y:100},label:"MALT Orchestrator",color:"#c7d2fe"},{id:"creator-agent",type:"agent",position:{x:500,y:100},label:"Creator Agent",color:"#a7f3d0"},{id:"conversation-manager",type:"manager",position:{x:700,y:100},label:"Conversation Manager",color:"#fee2e2"},{id:"verifier-agents",type:"pool",position:{x:900,y:50},label:"Verifier Agent Pool",color:"#fef9c3"},{id:"refiner-agents",type:"pool",position:{x:895,y:247},label:"Refiner Agent Pool",color:"#fef9c3"},{id:"final-output",type:"output",position:{x:1100,y:100},label:"Final Output",color:"#dcfce7"}],connections:[{id:"m1",from:"user-task",to:"malt-orchestrator",type:"start",name:"Submit Task"},{id:"m2",from:"malt-orchestrator",to:"creator-agent",type:"request",name:"Generate Initial Solution"},{id:"m3",from:"creator-agent",to:"conversation-manager",type:"record",name:"Log Solution"},{id:"m4",from:"conversation-manager",to:"verifier-agents",type:"evaluate",name:"Verify Solution"},{id:"m5",from:"verifier-agents",to:"conversation-manager",type:"feedback",name:"Feedback"},{id:"m6",from:"conversation-manager",to:"refiner-agents",type:"refine",name:"Refine Solution"},{id:"m7",from:"refiner-agents",to:"final-output",type:"deliver",name:"Return Output"}]}},{id:"majority-voting",title:"Majority Voting",description:"Agents independently vote on proposed decisions; the option with the most votes is selected as final.",longDescription:"A consensus architecture where each agent casts a vote on proposed decisions or outputs; the option with the most votes is selected as final. This reduces errors and promotes democratic decision-making in contexts like quality control or ensemble predictions.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Consensus","Ensemble","Validation"],tags:["majority-vote","consensus","ensemble","aggregation"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Majority Voting - Multiple agents casting votes aggregated into a final decision"},useCases:["Ensemble model predictions: aggregate outputs from multiple specialized models","Quality control: multiple agents vote to accept/reject generated content","Decision arbitration: choose safest plan among alternative proposals"],performance:{scalability:8,complexity:3,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Majority Voting Architecture",type:"majority_voting",components:[{id:"proposal",type:"input",position:{x:100,y:100},label:"Proposal",color:"#fde68a"},{id:"agent-1",type:"voter",position:{x:300,y:50},label:"Agent 1",color:"#c7d2fe"},{id:"agent-2",type:"voter",position:{x:300,y:100},label:"Agent 2",color:"#c7d2fe"},{id:"agent-n",type:"voter",position:{x:300,y:150},label:"Agent N",color:"#c7d2fe"},{id:"vote-aggregator",type:"aggregator",position:{x:500,y:100},label:"Vote Aggregator",color:"#a7f3d0"},{id:"decision",type:"output",position:{x:700,y:100},label:"Final Decision",color:"#fee2e2"}],connections:[{id:"mv1",from:"proposal",to:"agent-1",type:"request",name:"Request Vote"},{id:"mv2",from:"proposal",to:"agent-2",type:"request",name:"Request Vote"},{id:"mv3",from:"proposal",to:"agent-n",type:"request",name:"Request Vote"},{id:"mv4",from:"agent-1",to:"vote-aggregator",type:"vote",name:"Submit Vote"},{id:"mv5",from:"agent-2",to:"vote-aggregator",type:"vote",name:"Submit Vote"},{id:"mv6",from:"agent-n",to:"vote-aggregator",type:"vote",name:"Submit Vote"},{id:"mv7",from:"vote-aggregator",to:"decision",type:"deliver",name:"Finalize Decision"}]}},{id:"round-robin",title:"Round Robin",description:"Tasks are distributed cyclically among agents in a fixed sequence for fair load balancing.",longDescription:"Tasks are distributed cyclically among agents in a fixed sequence, ensuring fair load balancing and preventing any single agent from being overburdened. It’s widely used in scheduling, resource allocation, and parallel workflows.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Scheduling","Load Balancing"],tags:["round-robin","scheduler","fairness","queue"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Round Robin - Scheduler dispatches tasks cyclically across agents"},useCases:["Fair distribution of independent tasks across agents","Rate-limiting hotspots by rotating handlers","Balanced background job execution"],performance:{scalability:9,complexity:3,reliability:8},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Round Robin Architecture",type:"round_robin",components:[{id:"task-queue",type:"queue",position:{x:102,y:81},label:"Task Queue",color:"#fde68a"},{id:"agent-1",type:"worker",position:{x:490,y:10},label:"Agent 1",color:"#c7d2fe"},{id:"agent-2",type:"worker",position:{x:488,y:157},label:"Agent 2",color:"#c7d2fe"},{id:"agent-n",type:"worker",position:{x:485,y:279},label:"Agent N",color:"#c7d2fe"},{id:"scheduler",type:"scheduler",position:{x:103,y:233},label:"Round Robin Scheduler",color:"#a7f3d0"},{id:"output",type:"output",position:{x:730,y:100},label:"Processed Tasks",color:"#fee2e2"}],connections:[{id:"rr1",from:"task-queue",to:"scheduler",type:"feed",name:"Feed Tasks"},{id:"rr2",from:"scheduler",to:"agent-1",type:"dispatch",name:"Dispatch to Agent 1"},{id:"rr3",from:"scheduler",to:"agent-2",type:"dispatch",name:"Dispatch to Agent 2"},{id:"rr4",from:"scheduler",to:"agent-n",type:"dispatch",name:"Dispatch to Agent N"},{id:"rr5",from:"agent-1",to:"output",type:"deliver",name:"Return Result"},{id:"rr6",from:"agent-2",to:"output",type:"deliver",name:"Return Result"},{id:"rr7",from:"agent-n",to:"output",type:"deliver",name:"Return Result"}]}},{id:"auto-builder",title:"Auto-Builder",description:"Inspects task requirements and automatically composes the necessary agents into a working swarm.",longDescription:"A meta-architecture that inspects task requirements and automatically composes and configures the necessary agents into a working swarm. It streamlines rapid prototyping and adaptive system creation.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Orchestration","Automation"],tags:["auto-builder","composition","generation","factory"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Auto-Builder - Engine analyzes spec, builds agents, stores config, deploys swarm"},useCases:["Rapid prototyping of agent systems from high-level specs","Auto-scaling agent creation based on task domains","Reusable configuration blueprints for deployments"],performance:{scalability:8,complexity:5,reliability:8},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Auto-Builder Architecture",type:"auto_builder",components:[{id:"task-spec",type:"input",position:{x:100,y:100},label:"Task Specification",color:"#fde68a"},{id:"builder-engine",type:"engine",position:{x:300,y:100},label:"Builder Engine",color:"#c7d2fe"},{id:"agent-factory",type:"factory",position:{x:500,y:100},label:"Agent Factory",color:"#a7f3d0"},{id:"configuration-store",type:"store",position:{x:700,y:100},label:"Configuration Store",color:"#fee2e2"},{id:"deployed-swarm",type:"swarm",position:{x:900,y:100},label:"Deployed Swarm",color:"#dcfce7"}],connections:[{id:"ab1",from:"task-spec",to:"builder-engine",type:"analyze",name:"Analyze Spec"},{id:"ab2",from:"builder-engine",to:"agent-factory",type:"create",name:"Create Agents"},{id:"ab3",from:"agent-factory",to:"configuration-store",type:"store",name:"Store Config"},{id:"ab4",from:"configuration-store",to:"deployed-swarm",type:"deploy",name:"Deploy Swarm"}]}},{id:"hybrid-hierarchical-cluster",title:"Hybrid Hierarchical Cluster",description:"Top-level coordinator delegates tasks; peer clusters collaborate directly for efficiency.",longDescription:"Combines a hierarchical control layer with peer-to-peer clustering among lower-level agents. The top-level coordinator delegates broad tasks, while peer clusters collaborate directly for efficiency.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Hybrid","Hierarchical","P2P"],tags:["hybrid","hierarchy","cluster","peer-to-peer"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Hybrid hierarchical cluster - Coordinator and peer clusters"},useCases:["Large tasks decomposed to teams that collaborate internally","Federated processing with local coordination","Mixed central guidance with lateral communication"],performance:{scalability:9,complexity:7,reliability:8},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Hybrid Hierarchical Cluster Architecture",type:"hybrid_hierarchical_cluster",components:[{id:"root-coordinator",type:"coordinator",position:{x:100,y:100},label:"Root Coordinator",color:"#fde68a"},{id:"peer-cluster-1",type:"cluster",position:{x:300,y:50},label:"Peer Cluster 1",color:"#c7d2fe"},{id:"peer-cluster-2",type:"cluster",position:{x:300,y:150},label:"Peer Cluster 2",color:"#c7d2fe"},{id:"cluster-agent-a",type:"agent",position:{x:500,y:25},label:"Agent A",color:"#a7f3d0"},{id:"cluster-agent-b",type:"agent",position:{x:500,y:75},label:"Agent B",color:"#a7f3d0"},{id:"cluster-agent-c",type:"agent",position:{x:500,y:125},label:"Agent C",color:"#a7f3d0"},{id:"cluster-agent-d",type:"agent",position:{x:500,y:175},label:"Agent D",color:"#a7f3d0"}],connections:[{id:"hc1",from:"root-coordinator",to:"peer-cluster-1",type:"delegate",name:"Delegate Task"},{id:"hc2",from:"root-coordinator",to:"peer-cluster-2",type:"delegate",name:"Delegate Task"},{id:"hc3",from:"peer-cluster-1",to:"cluster-agent-a",type:"collaborate",name:"Collaborate"},{id:"hc4",from:"peer-cluster-1",to:"cluster-agent-b",type:"collaborate",name:"Collaborate"},{id:"hc5",from:"peer-cluster-2",to:"cluster-agent-c",type:"collaborate",name:"Collaborate"},{id:"hc6",from:"peer-cluster-2",to:"cluster-agent-d",type:"collaborate",name:"Collaborate"}]}},{id:"election",title:"Election",description:"Agents run a ballot to elect a leader or make collective choices with fault-tolerant coordination.",longDescription:"Agents run a ballot among themselves to elect a leader or make collective choices. This democratic approach supports robust governance in distributed systems and fault-tolerant coordination.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Consensus","Governance"],tags:["election","leader-election","ballot","consensus"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Election - Agents vote, tally aggregates, leader announced"},useCases:["Distributed leader election for coordination","Democratic parameter or plan selection","Robust fallback selection in fault-tolerant systems"],performance:{scalability:7,complexity:4,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Election Architecture",type:"election",components:[{id:"candidates",type:"input",position:{x:100,y:100},label:"Candidates",color:"#fde68a"},{id:"agent-voter-1",type:"voter",position:{x:300,y:50},label:"Agent Voter 1",color:"#c7d2fe"},{id:"agent-voter-n",type:"voter",position:{x:300,y:150},label:"Agent Voter N",color:"#c7d2fe"},{id:"vote-tally",type:"aggregator",position:{x:500,y:100},label:"Vote Tally",color:"#a7f3d0"},{id:"elected-leader",type:"output",position:{x:700,y:100},label:"Elected Leader",color:"#fee2e2"}],connections:[{id:"el1",from:"candidates",to:"agent-voter-1",type:"present",name:"Present Candidates"},{id:"el2",from:"candidates",to:"agent-voter-n",type:"present",name:"Present Candidates"},{id:"el3",from:"agent-voter-1",to:"vote-tally",type:"vote",name:"Submit Vote"},{id:"el4",from:"agent-voter-n",to:"vote-tally",type:"vote",name:"Submit Vote"},{id:"el5",from:"vote-tally",to:"elected-leader",type:"deliver",name:"Announce Leader"}]}},{id:"dynamic-conversational",title:"Dynamic Conversational",description:"An adaptive chat architecture that selects which agents join and how messages are routed based on context, user goals, and prior dialogue—ideal for advanced customer support and context-aware chatbots.",longDescription:"An adaptive conversational architecture where a context analyzer inspects dialogue state and user intent, a selector chooses the most relevant chat agents to engage, and a message router orchestrates turn-taking and delivery. This enables targeted, context-aware responses while minimizing noise from unrelated participants.",author:{name:"Eren Kızılırmak",avatar:"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",github:"eren9677"},category:["Conversational","Adaptive","Routing"],tags:["dynamic","chat","routing","selector","context-aware"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Dynamic Conversational - context analyzer, agent selector, message router with final response"},useCases:["Advanced customer support with intent-based agent handoff","Context-aware chatbots that selectively involve specialists","Enterprise assistants routing to policy, billing, or technical agents dynamically"],performance:{scalability:8,complexity:6,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Dynamic Conversational Architecture",type:"dynamic_conversational",components:[{id:"user-input",type:"input",position:{x:100,y:100},label:"User Input",color:"#fde68a"},{id:"context-analyzer",type:"analyzer",position:{x:300,y:100},label:"Context Analyzer",color:"#c7d2fe"},{id:"agent-selector",type:"selector",position:{x:500,y:100},label:"Agent Selector",color:"#a7f3d0"},{id:"chat-agent-1",type:"agent",position:{x:700,y:50},label:"Chat Agent 1",color:"#fee2e2"},{id:"chat-agent-2",type:"agent",position:{x:700,y:150},label:"Chat Agent 2",color:"#fee2e2"},{id:"message-router",type:"router",position:{x:900,y:100},label:"Message Router",color:"#dcfce7"},{id:"final-response",type:"output",position:{x:1100,y:100},label:"Final Response",color:"#f0f9ff"}],connections:[{id:"dc1",from:"user-input",to:"context-analyzer",type:"analyze",name:"Analyze Context"},{id:"dc2",from:"context-analyzer",to:"agent-selector",type:"select",name:"Select Agents"},{id:"dc3",from:"agent-selector",to:"chat-agent-1",type:"engage",name:"Engage Agent 1"},{id:"dc4",from:"agent-selector",to:"chat-agent-2",type:"engage",name:"Engage Agent 2"},{id:"dc5",from:"chat-agent-1",to:"message-router",type:"message",name:"Message"},{id:"dc6",from:"chat-agent-2",to:"message-router",type:"message",name:"Message"},{id:"dc7",from:"message-router",to:"final-response",type:"deliver",name:"Deliver Response"}]}},{id:"tree-architecture",title:"Tree",description:"A strict parent-child hierarchy where each agent has exactly one parent (except the root) and may have multiple children. This structure simplifies delegation, logging, and failure isolation.",longDescription:"A classic tree structure with a single root agent, internal nodes as managers, and leaves as executors. Each node has exactly one parent, enabling clear delegation paths, easy logging/traceability, and isolated failure handling. Common in organizational charts, decision trees, and taxonomy engines.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Hierarchical","Structured"],tags:["tree","hierarchy","delegation","supervision"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Tree - Root with children and leaves in a strict hierarchy"},useCases:["Organizational workflows with clear reporting lines","Decision trees with deterministic branching","Taxonomy processing and rule hierarchies"],performance:{scalability:8,complexity:4,reliability:9},createdAt:"2025-08-06",updatedAt:"2025-08-06",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/concept/swarm_architectures/",visual:{name:"Tree Architecture",type:"tree",components:[{id:"root",type:"root",position:{x:100,y:100},label:"Root Agent",color:"#fde68a"},{id:"child-1",type:"child",position:{x:300,y:50},label:"Child 1",color:"#c7d2fe"},{id:"child-2",type:"child",position:{x:300,y:150},label:"Child 2",color:"#c7d2fe"},{id:"leaf-1",type:"leaf",position:{x:500,y:25},label:"Leaf 1",color:"#a7f3d0"},{id:"leaf-2",type:"leaf",position:{x:500,y:75},label:"Leaf 2",color:"#a7f3d0"}],connections:[{id:"t1",from:"root",to:"child-1",type:"delegate",name:"Delegate Task"},{id:"t2",from:"root",to:"child-2",type:"delegate",name:"Delegate Task"},{id:"t3",from:"child-1",to:"leaf-1",type:"delegate",name:"Delegate Subtask"},{id:"t4",from:"child-2",to:"leaf-2",type:"delegate",name:"Delegate Subtask"}]}},{id:"collaborative-circle",title:"Collaborative Circle Architecture",description:"A collaborative multi-agent system where agents contribute to a shared memory and iteratively refine a solution through open, cyclical information sharing.",longDescription:"The Collaborative Circle architecture is a multi-agent system designed for cooperative problem-solving. In this structure, a group of agents works together on a shared task, contributing their individual capabilities. Information is shared openly among the agents in a cyclical or all-to-all manner, allowing for iterative refinement and collective decision-making. This architecture is well-suited for tasks that benefit from diverse perspectives and collaborative iteration to achieve a robust final output.",author:{name:"Eren Kızılırmak",github:"eren9677"},category:["Collaborative","Swarm"],tags:["collaborative","shared-memory","all-to-all","iteration"],diagram:{image:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop",alt:"Collaborative Circle - Agents contribute to and read from shared memory in a cyclic manner"},useCases:["Collaborative content creation with iterative peer refinement","Brainstorming and design sessions where agents share diverse perspectives","Research synthesis with shared knowledge accumulation across agents"],performance:{scalability:8,complexity:4,reliability:9},createdAt:"2025-08-07",updatedAt:"2025-08-07",githubUrl:null,documentationUrl:"https://docs.swarms.world/en/latest/swarms/structs/overview/",visual:{name:"Collaborative Circle Architecture",type:"collaborative_circle",components:[{id:"shared-memory",type:"memory",position:{x:400,y:250},label:"Shared Memory",color:"#f3e8ff"},{id:"agent-1",type:"agent",position:{x:400,y:50},label:"Agent 1",color:"#dbeafe"},{id:"agent-2",type:"agent",position:{x:650,y:250},label:"Agent 2",color:"#dcfce7"},{id:"agent-3",type:"agent",position:{x:400,y:450},label:"Agent 3",color:"#fee2e2"},{id:"agent-4",type:"agent",position:{x:150,y:250},label:"Agent 4",color:"#fef9c3"}],connections:[{id:"conn-1",from:"agent-1",to:"shared-memory",type:"write",name:"Contribute"},{id:"conn-2",from:"agent-2",to:"shared-memory",type:"write",name:"Contribute"},{id:"conn-3",from:"agent-3",to:"shared-memory",type:"write",name:"Contribute"},{id:"conn-4",from:"agent-4",to:"shared-memory",type:"write",name:"Contribute"},{id:"conn-5",from:"shared-memory",to:"agent-1",type:"read",name:"Read Update"},{id:"conn-6",from:"shared-memory",to:"agent-2",type:"read",name:"Read Update"},{id:"conn-7",from:"shared-memory",to:"agent-3",type:"read",name:"Read Update"},{id:"conn-8",from:"shared-memory",to:"agent-4",type:"read",name:"Read Update"}]}}],i=(e,t)=>{let a=e;if(t.category&&"all"!==t.category&&(a=a.filter(e=>e.category.includes(t.category))),t.search){let e=t.search.toLowerCase();a=a.filter(t=>t.title.toLowerCase().includes(e)||t.description.toLowerCase().includes(e)||t.tags.some(t=>t.toLowerCase().includes(e))||t.author.name.toLowerCase().includes(e))}switch(t.sortBy){case"newest":a.sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime());break;case"popular":a.sort((e,t)=>{let a=e.performance?e.performance.scalability+e.performance.reliability:0;return(t.performance?t.performance.scalability+t.performance.reliability:0)-a});break;case"alphabetical":a.sort((e,t)=>e.title.localeCompare(t.title))}return a},s=e=>{let t=new Set;return e.forEach(e=>{e.category.forEach(e=>t.add(e))}),Array.from(t).sort()},l=e=>e>=8?"text-green-600":e>=6?"text-yellow-600":"text-red-600",c=e=>e>=8?"Excellent":e>=6?"Good":"Fair";var d=a(6691),p=a.n(d);let m=e=>{let{children:t,className:a="",onClick:r,hover:n=!0}=e,i="".concat("bg-light-card dark:bg-dark-card rounded-lg border border-light-border dark:border-dark-border overflow-hidden relative transition-colors duration-200"," ").concat(n?"transition transform duration-200 ease hover:shadow-soft-hover dark:hover:shadow-dark-hover hover:translate-y-[-4px] cursor-pointer group":""," ").concat(r?"cursor-pointer":""," ").concat(a);return(0,o.jsx)("div",{className:i,onClick:r,children:t})},g=e=>{let{children:t,variant:a="primary",size:r="md",className:n=""}=e,i="".concat("inline-flex items-center font-medium rounded-full transition-colors duration-200"," ").concat({primary:"bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 hover:bg-primary-200 dark:hover:bg-primary-800",secondary:"bg-gray-100 dark:bg-dark-surface text-gray-800 dark:text-dark-text-secondary hover:bg-gray-200 dark:hover:bg-dark-card",outline:"border border-primary-300 dark:border-primary-600 text-primary-700 dark:text-primary-300 hover:bg-primary-50 dark:hover:bg-primary-900/20"}[a]," ").concat({sm:"px-2 py-0.5 text-xs",md:"px-3 py-1 text-sm"}[r]," ").concat(n);return(0,o.jsx)("span",{className:i,children:t})};var u=a(798);let h=e=>{let{architecture:t,width:a=400,height:r=200,showTitle:n=!0,showType:i=!0,showComponents:s=!0,className:l=""}=e;return(0,o.jsxs)("div",{className:"bg-white border border-gray-200 rounded-lg p-4 shadow-sm ".concat(l),children:[(n||i)&&(0,o.jsxs)("div",{className:"mb-4 text-center",children:[n&&(0,o.jsx)("h4",{className:"text-lg font-medium mb-2",children:t.name}),i&&(0,o.jsxs)("p",{className:"text-gray-600 text-sm mb-3",children:["Type: ",t.type]})]}),(0,o.jsx)("div",{className:"flex justify-center mb-6",children:(0,o.jsx)(u.r,{components:t.components,connections:t.connections,width:a,height:r,className:"border border-gray-100"})}),s&&t.components.length>0&&(0,o.jsx)("div",{className:"flex flex-wrap gap-2 justify-center",children:t.components.map(e=>(0,o.jsx)("span",{className:"bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded",style:{backgroundColor:e.color?"".concat(e.color,"40"):void 0},children:e.label},e.id))})]})};var y=a(1396),f=a.n(y);let b=e=>{let{architecture:t,onClick:a}=e;return(0,o.jsx)(m,{onClick:a,className:"w-full h-80 bg-white dark:bg-dark-card border border-gray-200 dark:border-dark-border rounded-lg cursor-pointer transition-all duration-200 ease hover:shadow-lg dark:hover:shadow-dark-hover group",children:(0,o.jsxs)("div",{className:"p-4 h-full flex flex-col",children:[(0,o.jsx)("div",{className:"relative w-full h-48 mb-3 rounded-md overflow-hidden",children:t.visual?(0,o.jsx)(h,{architecture:t.visual,width:300,height:150,showTitle:!1,showType:!1,showComponents:!1,className:"h-full"}):(0,o.jsx)(p(),{src:t.diagram.image,alt:t.diagram.alt,fill:!0,className:"object-cover group-hover:scale-105 transition-transform duration-300",sizes:"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 25vw"})}),(0,o.jsx)("h3",{className:"text-sm font-semibold text-gray-900 dark:text-dark-text mb-2 line-clamp-1",children:t.title}),(0,o.jsx)("p",{className:"text-xs text-gray-600 dark:text-dark-text-secondary mb-3 line-clamp-2 flex-1",children:t.description}),(0,o.jsxs)("div",{className:"flex flex-wrap gap-1 mb-3",children:[t.tags.slice(0,2).map(e=>(0,o.jsx)(g,{variant:"secondary",className:"text-xs px-2 py-0.5",children:e},e)),t.tags.length>2&&(0,o.jsxs)("span",{className:"text-xs text-gray-500 dark:text-gray-400",children:["+",t.tags.length-2]})]}),(0,o.jsxs)("div",{className:"flex items-center justify-between mt-auto",children:[(0,o.jsx)("div",{className:"flex items-center space-x-2",children:(0,o.jsx)("span",{className:"text-xs text-gray-500 dark:text-gray-400",children:t.author.github?"@".concat(t.author.github):t.author.name})}),(0,o.jsx)("span",{className:"text-xs text-gray-400 dark:text-gray-500",children:new Date(t.createdAt).getFullYear()})]})]})})},x=()=>(0,o.jsxs)(f(),{href:"/architecture-builder",className:"w-full h-80 border-2 border-dashed border-primary-300 dark:border-primary-600 hover:border-primary-400 dark:hover:border-primary-500 bg-white dark:bg-dark-card rounded-lg cursor-pointer transition-all duration-300 hover:translate-y-[-4px] hover:shadow-lg dark:hover:shadow-dark-hover group p-4 flex flex-col items-center justify-center text-center",children:[(0,o.jsx)("div",{className:"w-12 h-12 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center mb-3 group-hover:bg-primary-200 dark:group-hover:bg-primary-800 transition-colors duration-200",children:(0,o.jsx)("svg",{className:"w-6 h-6 text-primary-600 dark:text-primary-400",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M12 6v6m0 0v6m0-6h6m-6 0H6"})})}),(0,o.jsx)("h3",{className:"text-sm font-semibold text-gray-900 dark:text-dark-text mb-1",children:"Add New Architecture"}),(0,o.jsx)("p",{className:"text-xs text-gray-600 dark:text-dark-text-secondary line-clamp-2",children:"Create and visualize your multi-agent architecture with our builder."})]});var v=a(492),w=a(6651);let k=["#4f46e5","#db2777","#059669","#d97706","#6d28d9"],A={minX:0,minY:0,maxX:3e3,maxY:1500},C=e=>({x:e.position.x+60,y:e.position.y+30}),j=(e,t)=>({top:{x:e.position.x+60,y:e.position.y},right:{x:e.position.x+120,y:e.position.y+30},bottom:{x:e.position.x+60,y:e.position.y+60},left:{x:e.position.x,y:e.position.y+30}})[t],z=()=>{let e=[];for(let t=A.minX;t<=A.maxX;t+=50)e.push((0,o.jsx)("line",{x1:t,y1:A.minY,x2:t,y2:A.maxY,stroke:"#e2e8f0",strokeWidth:t%200==0?1:.5,opacity:t%200==0?.3:.15},"v-".concat(t)));for(let t=A.minY;t<=A.maxY;t+=50)e.push((0,o.jsx)("line",{x1:A.minX,y1:t,x2:A.maxX,y2:t,stroke:"#e2e8f0",strokeWidth:t%200==0?1:.5,opacity:t%200==0?.3:.15},"h-".concat(t)));return e},N=function(e,t){arguments.length>2&&void 0!==arguments[2]&&arguments[2];let a=arguments.length>3?arguments[3]:void 0;if(arguments.length>4&&arguments[4],e.id===t.id)return a&&"auto"!==a?{fromSide:a,toSide:a}:{fromSide:"top",toSide:"top"};let o=C(e),r=C(t),n=r.x-o.x,i=r.y-o.y;return Math.abs(n)>Math.abs(i)?{fromSide:n>0?"right":"left",toSide:n>0?"left":"right"}:{fromSide:i>0?"bottom":"top",toSide:i>0?"top":"bottom"}},R=function(e,t){let a,o,r,n,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,l=arguments.length>4?arguments[4]:void 0;arguments.length>5&&arguments[5];let c=40*s;if(i){let t,a,o,r;let n=80+30*s;switch(l){case"top":t=e.x-n/2,a=e.y-n,o=e.x+n/2,r=e.y-n;break;case"right":default:t=e.x+n,a=e.y-n/2,o=e.x+n,r=e.y+n/2;break;case"bottom":t=e.x+n/2,a=e.y+n,o=e.x-n/2,r=e.y+n;break;case"left":t=e.x-n,a=e.y+n/2,o=e.x-n,r=e.y-n/2}return"M ".concat(e.x," ").concat(e.y,"\n            C ").concat(t," ").concat(a,"\n              ").concat(o," ").concat(r,"\n              ").concat(e.x," ").concat(e.y)}let d=t.x-e.x,p=t.y-e.y,m=Math.min(.3*Math.sqrt(d*d+p*p),80);return Math.abs(d)>Math.abs(p)?(a=e.x+(d>0?m:-m),o=e.y+c,r=t.x+(d>0?-m:m),n=t.y+c):(a=e.x+c,o=e.y+(p>0?m:-m),r=t.x+c,n=t.y+(p>0?-m:m)),"M ".concat(e.x," ").concat(e.y," C ").concat(a," ").concat(o," ").concat(r," ").concat(n," ").concat(t.x," ").concat(t.y)},T=e=>{let{components:t,connections:a}=e,n=(0,r.useRef)(null),i=(0,r.useRef)(null),[s,l]=(0,r.useState)({scale:1,offsetX:0,offsetY:0}),[c,d]=(0,r.useState)({type:"none"});(0,r.useCallback)((e,t)=>{if(!n.current)return{x:0,y:0};let a=n.current.getBoundingClientRect();return{x:(e-a.left-s.offsetX)/s.scale,y:(t-a.top-s.offsetY)/s.scale}},[s]),(0,r.useCallback)((e,t)=>({x:e*s.scale+s.offsetX,y:t*s.scale+s.offsetY}),[s]);let p=(0,r.useCallback)(e=>{d({type:"canvas",startPos:{x:e.clientX,y:e.clientY}}),e.preventDefault()},[]),m=(0,r.useCallback)(e=>{if("canvas"===c.type&&c.startPos){let t=e.clientX-c.startPos.x,a=e.clientY-c.startPos.y;l(e=>({...e,offsetX:e.offsetX+t,offsetY:e.offsetY+a})),d(t=>({...t,startPos:{x:e.clientX,y:e.clientY}}))}},[c]),g=(0,r.useCallback)(e=>{d({type:"none"})},[]);(0,r.useCallback)(e=>{var t;if(!e.ctrlKey&&!e.metaKey)return;e.preventDefault(),e.stopPropagation();let a=e.deltaY>0?-.1:.1,o=Math.max(.25,Math.min(3,s.scale+a)),r=null===(t=n.current)||void 0===t?void 0:t.getBoundingClientRect();if(r){let t=e.clientX-r.left,a=e.clientY-r.top,n=o/s.scale;l({scale:o,offsetX:t-(t-s.offsetX)*n,offsetY:a-(a-s.offsetY)*n})}},[s]);let u=(0,r.useCallback)(e=>{var t;if(!e.ctrlKey&&!e.metaKey)return;e.preventDefault(),e.stopPropagation();let a=e.deltaY>0?-.15:.15,o=Math.max(.25,Math.min(3,s.scale+a)),r=null===(t=n.current)||void 0===t?void 0:t.getBoundingClientRect();if(r){let t=e.clientX-r.left,a=e.clientY-r.top,n=o/s.scale;l({scale:o,offsetX:t-(t-s.offsetX)*n,offsetY:a-(a-s.offsetY)*n})}},[s]),h=(0,r.useMemo)(()=>{let e={};return a.forEach(t=>{let a=[t.from,t.to].sort().join("-");e[a]||(e[a]=[]),e[a].push(t)}),Object.values(e).flatMap(e=>e.map((e,a)=>{let r,n;let i=t.find(t=>t.id===e.from),s=t.find(t=>t.id===e.to);if(!i||!s)return null;let l=i.id===s.id,{fromSide:c,toSide:d}=N(i,s,a,e.fromCorner,e.toCorner),p=j(i,c),m=l?p:j(s,d),g=R(p,m,l,a,c,d),u=40*a;if(l){let e=80+30*a;switch(c){case"top":default:r=p.x,n=p.y-e/2;break;case"right":r=p.x+e/2,n=p.y;break;case"bottom":r=p.x,n=p.y+e/2;break;case"left":r=p.x-e/2,n=p.y}}else Math.abs(m.x-p.x)>Math.abs(m.y-p.y)?(r=(p.x+m.x)/2,n=(p.y+m.y)/2+u-8):(r=(p.x+m.x)/2+u,n=(p.y+m.y)/2+15*a-8);let h=k[a%k.length],y="arrowhead-".concat(a%k.length);return(0,o.jsxs)("g",{children:[(0,o.jsx)("path",{d:g,stroke:h,strokeWidth:2,fill:"none",markerEnd:"url(#".concat(y,")"),className:"transition-all duration-200 hover:stroke-width-3"}),(0,o.jsx)("text",{x:r,y:n,fontSize:12,fontWeight:"bold",fill:"#334155",textAnchor:"middle",className:"select-none",children:e.name})]},e.id)}))},[t,a]);return(0,o.jsxs)("div",{className:"relative w-full h-full bg-gradient-to-br from-slate-50 to-slate-100 border border-slate-200 rounded-lg overflow-hidden",children:[(0,o.jsxs)("div",{className:"absolute top-4 right-4 z-20 flex flex-col gap-2 bg-white/90 backdrop-blur-sm rounded-lg p-2 shadow-lg",children:[(0,o.jsx)("button",{onClick:()=>l(e=>({...e,scale:Math.min(e.scale+.2,3)})),className:"w-8 h-8 flex items-center justify-center bg-white border border-slate-300 rounded-md hover:bg-slate-50 transition-colors",title:"Zoom In",children:(0,o.jsx)("svg",{className:"w-4 h-4",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M12 6v6m0 0v6m0-6h6m-6 0H6"})})}),(0,o.jsx)("button",{onClick:()=>l(e=>({...e,scale:Math.max(e.scale-.2,.25)})),className:"w-8 h-8 flex items-center justify-center bg-white border border-slate-300 rounded-md hover:bg-slate-50 transition-colors",title:"Zoom Out",children:(0,o.jsx)("svg",{className:"w-4 h-4",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M20 12H4"})})}),(0,o.jsx)("button",{onClick:()=>l({scale:1,offsetX:0,offsetY:0}),className:"w-8 h-8 flex items-center justify-center bg-white border border-slate-300 rounded-md hover:bg-slate-50 transition-colors",title:"Reset View",children:(0,o.jsx)("svg",{className:"w-4 h-4",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"})})})]}),(0,o.jsxs)("div",{className:"absolute top-4 left-4 z-20 flex gap-2",children:[(0,o.jsxs)("div",{className:"bg-white/90 backdrop-blur-sm px-3 py-1.5 rounded-lg text-sm text-slate-600 shadow-lg",children:["Zoom: ",Math.round(100*s.scale),"% • Hold Ctrl+Scroll to zoom"]}),(0,o.jsxs)("div",{className:"bg-white/90 backdrop-blur-sm px-3 py-1.5 rounded-lg text-sm text-slate-600 shadow-lg",children:["Canvas: ",A.maxX,"\xd7",A.maxY,"px"]})]}),(0,o.jsxs)("div",{ref:n,className:"w-full h-full cursor-grab active:cursor-grabbing",onMouseDown:p,onMouseMove:m,onMouseUp:g,onMouseLeave:()=>d({type:"none"}),onWheel:u,style:{cursor:"canvas"===c.type?"grabbing":"grab"},children:[(0,o.jsxs)("svg",{ref:i,className:"absolute",style:{transform:"translate(".concat(s.offsetX,"px, ").concat(s.offsetY,"px) scale(").concat(s.scale,")"),transformOrigin:"0 0",zIndex:1,width:A.maxX,height:A.maxY,left:0,top:0},children:[(0,o.jsx)("defs",{children:k.map((e,t)=>(0,o.jsx)("marker",{id:"arrowhead-".concat(t),markerWidth:"10",markerHeight:"7",refX:"9",refY:"3.5",orient:"auto",markerUnits:"strokeWidth",children:(0,o.jsx)("path",{d:"M0,0 L0,7 L9,3.5 z",fill:e})},t))}),(0,o.jsx)("rect",{x:A.minX,y:A.minY,width:A.maxX-A.minX,height:A.maxY-A.minY,fill:"none",stroke:"#cbd5e1",strokeWidth:2,strokeDasharray:"10,5",opacity:.5}),z(),h]}),(0,o.jsx)("div",{className:"absolute bg-white/50",style:{transform:"translate(".concat(s.offsetX,"px, ").concat(s.offsetY,"px) scale(").concat(s.scale,")"),transformOrigin:"0 0",zIndex:0,left:A.minX,top:A.minY,width:A.maxX-A.minX,height:A.maxY-A.minY,border:"2px dashed #cbd5e1",borderRadius:"8px"}}),(0,o.jsxs)("div",{className:"absolute",style:{transform:"translate(".concat(s.offsetX,"px, ").concat(s.offsetY,"px) scale(").concat(s.scale,")"),transformOrigin:"0 0",zIndex:2,left:0,top:0,width:A.maxX,height:A.maxY},children:[t.map(e=>(0,o.jsx)("div",{"data-component-id":e.id,className:"absolute border-2 border-slate-300 rounded-lg shadow-lg bg-white hover:shadow-xl hover:border-indigo-400 transition-all duration-200 select-none",style:{left:e.position.x,top:e.position.y,width:120,height:60,backgroundColor:e.color||"#ffffff",cursor:"default"},children:(0,o.jsxs)("div",{className:"p-3 h-full flex flex-col justify-center",children:[(0,o.jsx)("div",{className:"font-semibold text-sm text-slate-800 text-center",title:e.label,children:e.label}),(0,o.jsx)("div",{className:"text-xs text-slate-500 text-center mt-1",title:e.type,children:e.type})]})},e.id)),0===t.length&&(0,o.jsx)("div",{className:"absolute flex items-center justify-center",style:{left:A.maxX/2-150,top:A.maxY/2-100,width:300,height:200},children:(0,o.jsxs)("div",{className:"text-center p-8 bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border-2 border-dashed border-slate-300",children:[(0,o.jsx)("div",{className:"text-4xl mb-4",children:"\uD83C\uDFD7️"}),(0,o.jsx)("h3",{className:"text-lg font-semibold text-slate-800 mb-2",children:"No Components"}),(0,o.jsx)("p",{className:"text-slate-600 text-sm",children:"This architecture has no visual components"})]})})]})]})]})},S=e=>{let{architecture:t,isOpen:a,onClose:r}=e;return t?(0,o.jsx)(v.u,{isOpen:a,onClose:r,size:"lg",children:(0,o.jsxs)("div",{className:"space-y-4",children:[(0,o.jsx)("div",{className:"border-b border-gray-200 pb-3",children:(0,o.jsxs)("div",{className:"flex items-start justify-between",children:[(0,o.jsxs)("div",{className:"flex-1",children:[(0,o.jsx)("h2",{className:"text-xl font-bold text-gray-900 mb-2",children:t.title}),(0,o.jsx)("p",{className:"text-sm text-gray-600 mb-3",children:t.longDescription}),(0,o.jsx)("div",{className:"flex flex-wrap gap-1.5",children:t.category.map(e=>(0,o.jsx)(g,{variant:"primary",children:e},e))})]}),(0,o.jsxs)("div",{className:"flex space-x-2",children:[t.githubUrl&&(0,o.jsxs)(w.z,{variant:"outline",size:"sm",onClick:()=>window.open(t.githubUrl,"_blank","noopener,noreferrer"),children:[(0,o.jsx)("svg",{className:"w-4 h-4 mr-2",fill:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{d:"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"})}),"GitHub"]}),t.documentationUrl&&(0,o.jsxs)(w.z,{variant:"outline",size:"sm",onClick:()=>window.open(t.documentationUrl,"_blank","noopener,noreferrer"),children:[(0,o.jsx)("svg",{className:"w-4 h-4 mr-2",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"})}),"Reference"]})]})]})}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-3",children:"Architecture Diagram"}),(0,o.jsx)("div",{className:"h-96 rounded-lg overflow-hidden",children:t.visual?(0,o.jsx)(T,{components:t.visual.components,connections:t.visual.connections}):(0,o.jsx)("div",{className:"relative h-full rounded-lg overflow-hidden bg-gray-100",children:(0,o.jsx)(p(),{src:t.diagram.image,alt:t.diagram.alt,fill:!0,className:"object-cover",sizes:"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"})})})]}),t.implementation&&(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-3",children:"Detailed Example"}),(0,o.jsx)("div",{className:"text-sm text-gray-700 leading-relaxed whitespace-pre-line",children:t.implementation.codeExample})]}),t.performance&&(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-3",children:"Performance Metrics"}),(0,o.jsxs)("div",{className:"grid grid-cols-3 gap-4",children:[(0,o.jsxs)("div",{className:"text-center p-4 bg-gray-50 rounded-lg",children:[(0,o.jsxs)("div",{className:"text-2xl font-bold ".concat(l(t.performance.scalability)),children:[t.performance.scalability,"/10"]}),(0,o.jsx)("div",{className:"text-sm text-gray-600",children:"Scalability"}),(0,o.jsx)("div",{className:"text-xs text-gray-500 mt-1",children:c(t.performance.scalability)})]}),(0,o.jsxs)("div",{className:"text-center p-4 bg-gray-50 rounded-lg",children:[(0,o.jsxs)("div",{className:"text-2xl font-bold ".concat(l(t.performance.complexity)),children:[t.performance.complexity,"/10"]}),(0,o.jsx)("div",{className:"text-sm text-gray-600",children:"Complexity"}),(0,o.jsx)("div",{className:"text-xs text-gray-500 mt-1",children:c(t.performance.complexity)})]}),(0,o.jsxs)("div",{className:"text-center p-4 bg-gray-50 rounded-lg",children:[(0,o.jsxs)("div",{className:"text-2xl font-bold ".concat(l(t.performance.reliability)),children:[t.performance.reliability,"/10"]}),(0,o.jsx)("div",{className:"text-sm text-gray-600",children:"Reliability"}),(0,o.jsx)("div",{className:"text-xs text-gray-500 mt-1",children:c(t.performance.reliability)})]})]})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-3",children:"Use Cases"}),(0,o.jsx)("ul",{className:"space-y-2",children:t.useCases.map((e,t)=>(0,o.jsxs)("li",{className:"flex items-start",children:[(0,o.jsx)("svg",{className:"w-5 h-5 text-primary-500 mr-2 mt-0.5 flex-shrink-0",fill:"currentColor",viewBox:"0 0 20 20",children:(0,o.jsx)("path",{fillRule:"evenodd",d:"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",clipRule:"evenodd"})}),(0,o.jsx)("span",{className:"text-gray-700",children:e})]},t))})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{className:"text-lg font-semibold text-gray-900 mb-3",children:"Tags"}),(0,o.jsx)("div",{className:"flex flex-wrap gap-2",children:t.tags.map(e=>(0,o.jsx)(g,{variant:"secondary",children:e},e))})]}),(0,o.jsx)("div",{className:"border-t border-gray-200 pt-4",children:(0,o.jsxs)("div",{className:"flex items-center justify-between",children:[(0,o.jsx)("div",{className:"flex items-center space-x-3",children:(0,o.jsxs)("div",{className:"text-sm text-gray-500",children:["Contributed by ",t.author.github?"@".concat(t.author.github):t.author.name]})}),(0,o.jsx)(w.z,{variant:"primary",onClick:r,children:"Close"})]})})]})}):null},D=e=>{let{value:t,onChange:a,placeholder:r="Search architectures...",className:n=""}=e;return(0,o.jsxs)("div",{className:"relative ".concat(n),children:[(0,o.jsx)("div",{className:"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none",children:(0,o.jsx)("svg",{className:"h-5 w-5 text-gray-400 dark:text-gray-500",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"})})}),(0,o.jsx)("input",{type:"text",value:t,onChange:e=>a(e.target.value),className:"block w-full pl-10 pr-3 py-2 border border-light-border dark:border-dark-border rounded-md leading-5 bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 dark:focus:placeholder-gray-500 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors duration-200",placeholder:r})]})};var M=a(6834);let q=()=>{let{theme:e,toggleTheme:t}=(0,M.useTheme)();return(0,o.jsx)("button",{onClick:t,className:"p-2 rounded-lg bg-gray-100 dark:bg-dark-surface hover:bg-gray-200 dark:hover:bg-dark-card transition-colors duration-200","aria-label":"Switch to ".concat("light"===e?"dark":"light"," mode"),children:"light"===e?(0,o.jsx)("svg",{className:"w-5 h-5 text-gray-700",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"})}):(0,o.jsx)("svg",{className:"w-5 h-5 text-gray-300",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,o.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"})})})};function P(){let[e,t]=(0,r.useState)({category:"",search:"",sortBy:"newest"}),[a,l]=(0,r.useState)({isOpen:!1,architecture:null}),[c,d]=(0,r.useState)(null),[p,m]=(0,r.useState)(!0),g=(0,r.useMemo)(()=>i(n,e),[e]),u=(0,r.useMemo)(()=>s(n),[]),h=e=>{l({isOpen:!0,architecture:e})};return(0,r.useEffect)(()=>{(async()=>{try{let e=await fetch("https://api.github.com/repos/eren9677/MAS-multi-agent-architectures");if(e.ok){let t=await e.json();d(t.stargazers_count)}else console.error("Failed to fetch star count"),d(null)}catch(e){console.error("Error fetching star count:",e),d(null)}finally{m(!1)}})()},[]),(0,o.jsxs)("div",{className:"min-h-screen bg-light-bg dark:bg-dark-bg transition-colors duration-200",children:[(0,o.jsx)("header",{className:"border-b border-light-border dark:border-dark-border bg-light-card dark:bg-dark-card",children:(0,o.jsx)("div",{className:"max-w-7xl mx-auto px-8 py-4",children:(0,o.jsxs)("div",{className:"flex items-center justify-between",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"text-2xl font-bold bg-gradient-blueish bg-clip-text text-transparent bg-size-200 animate-gradient-shift hover:bg-gradient-blueish-hover hover:animate-gradient-hover transition-all duration-500 ease-in-out cursor-pointer",children:"MAS Design"}),(0,o.jsx)("p",{className:"text-sm text-light-text-secondary dark:text-dark-text-secondary mt-1",children:"Collaborative Multi-Agent Architecture Directory"})]}),(0,o.jsxs)("div",{className:"flex items-center space-x-4",children:[(0,o.jsxs)("a",{href:"https://github.com/eren9677/MAS-multi-agent-architectures",target:"_blank",rel:"noopener noreferrer",className:"flex items-center text-light-text-secondary dark:text-dark-text-secondary hover:text-primary-600 dark:hover:text-primary-400 transition-colors","aria-label":"GitHub Repository",children:[(0,o.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",fill:"currentColor",viewBox:"0 0 24 24",className:"mr-1",children:(0,o.jsx)("path",{d:"M12 0C5.37 0 0 5.37 0 12c0 5.3 3.438 9.8 8.205 11.385.6.11.82-.26.82-.577v-2.234c-3.338.726-4.042-1.61-4.042-1.61-.546-1.388-1.333-1.758-1.333-1.758-1.09-.745.082-.73.082-.73 1.205.085 1.84 1.238 1.84 1.238 1.07 1.834 2.807 1.304 3.492.997.108-.776.418-1.305.762-1.605-2.665-.3-5.466-1.335-5.466-5.93 0-1.31.467-2.38 1.235-3.22-.123-.302-.535-1.523.117-3.176 0 0 1.008-.322 3.3 1.23a11.52 11.52 0 0 1 3-.404c1.02.005 2.045.138 3 .404 2.29-1.552 3.296-1.23 3.296-1.23.655 1.653.244 2.874.12 3.176.77.84 1.233 1.91 1.233 3.22 0 4.61-2.807 5.625-5.48 5.92.43.372.823 1.103.823 2.222v3.293c0 .32.217.694.825.576C20.565 21.796 24 17.297 24 12c0-6.63-5.373-12-12-12z"})}),"Repo"]}),(0,o.jsxs)("div",{className:"flex items-center space-x-2 text-sm text-light-text-secondary dark:text-dark-text-secondary",children:[(0,o.jsx)("span",{className:"text-primary-500",children:"★"}),(0,o.jsx)("span",{children:p?"...":null!==c?c.toLocaleString():"N/A"})]}),(0,o.jsx)(q,{})]})]})})}),(0,o.jsxs)("div",{className:"max-w-7xl mx-auto flex",children:[(0,o.jsx)("aside",{className:"w-64 flex-shrink-0 border-r border-light-border dark:border-dark-border bg-light-card dark:bg-dark-card",children:(0,o.jsxs)("div",{className:"p-4 space-y-6",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{className:"text-sm font-medium text-light-text dark:text-dark-text mb-2",children:"Multi-Agent Architectures"}),(0,o.jsxs)("p",{className:"text-xs text-light-text-secondary dark:text-dark-text-secondary",children:[n.length," architectures"]})]}),(0,o.jsx)("div",{children:(0,o.jsx)(D,{value:e.search,onChange:a=>t({...e,search:a}),placeholder:"Search architectures..."})}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"text-sm font-medium text-light-text dark:text-dark-text mb-3",children:"Categories"}),(0,o.jsxs)("div",{className:"space-y-1",children:[(0,o.jsx)("button",{onClick:()=>t({...e,category:""}),className:"w-full text-left px-2 py-1.5 text-xs rounded transition-colors duration-200 ".concat(""===e.category?"bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300":"text-light-text dark:text-dark-text hover:bg-gray-100 dark:hover:bg-dark-surface"),children:"All Architectures"}),u.map(a=>(0,o.jsx)("button",{onClick:()=>t({...e,category:a}),className:"w-full text-left px-2 py-1.5 text-xs rounded transition-colors duration-200 ".concat(e.category===a?"bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300":"text-light-text dark:text-dark-text hover:bg-gray-100 dark:hover:bg-dark-surface"),children:a},a))]})]}),(0,o.jsxs)("div",{className:"pt-4 border-t border-light-border dark:border-dark-border",children:[(0,o.jsx)("h4",{className:"text-sm font-medium text-light-text dark:text-dark-text mb-2",children:"About"}),(0,o.jsx)("p",{className:"text-xs text-light-text-secondary dark:text-dark-text-secondary leading-relaxed mb-2",children:"A curated collection of multi-agent AI architectures for researchers, developers, and AI enthusiasts. Explore innovative agent-based systems and share your own architectures with the community."}),(0,o.jsxs)("p",{className:"text-xs text-light-text-secondary dark:text-dark-text-secondary leading-relaxed",children:["Curated by ",(0,o.jsx)("a",{href:"https://www.linkedin.com/in/eren9677/",target:"_blank",rel:"noopener noreferrer",className:"text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300 underline transition-colors duration-200",children:"Eren Kızılırmak"})]})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"text-sm font-medium text-light-text dark:text-dark-text mb-2",children:"Contributing"}),(0,o.jsx)("p",{className:"text-xs text-light-text-secondary dark:text-dark-text-secondary leading-relaxed",children:"If you'd like to contribute, please fork the repository and make changes as you'd like. Pull requests are warmly welcome."})]})]})}),(0,o.jsx)("main",{className:"flex-1 p-8 bg-light-bg dark:bg-dark-bg",children:(0,o.jsxs)("div",{className:"max-w-7xl mx-auto",children:[(0,o.jsx)("div",{className:"mb-6",children:(0,o.jsx)("div",{className:"flex items-center justify-between",children:(0,o.jsxs)("div",{className:"flex items-center space-x-4",children:[(0,o.jsxs)("select",{value:e.sortBy,onChange:a=>t({...e,sortBy:a.target.value}),className:"text-sm border border-light-border dark:border-dark-border rounded px-3 py-1.5 bg-light-card dark:bg-dark-card text-light-text dark:text-dark-text focus:outline-none focus:ring-2 focus:ring-primary-500 transition-colors duration-200",children:[(0,o.jsx)("option",{value:"newest",children:"Newest"}),(0,o.jsx)("option",{value:"popular",children:"Popular"}),(0,o.jsx)("option",{value:"alphabetical",children:"Alphabetical"})]}),(0,o.jsxs)("span",{className:"text-sm text-light-text-secondary dark:text-dark-text-secondary",children:[g.length," of ",n.length," architectures"]})]})})}),(0,o.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 auto-rows-fr",children:[(0,o.jsx)(x,{}),g.map(e=>(0,o.jsx)(b,{architecture:e,onClick:()=>h(e)},e.id))]})]})})]}),(0,o.jsx)(S,{architecture:a.architecture,isOpen:a.isOpen,onClose:()=>{l({isOpen:!1,architecture:null})}})]})}},6834:function(e,t,a){"use strict";a.r(t),a.d(t,{ThemeProvider:function(){return i},useTheme:function(){return s}});var o=a(7437),r=a(2265);let n=(0,r.createContext)(void 0);function i(e){let{children:t}=e,[a,i]=(0,r.useState)("light");return(0,r.useEffect)(()=>{let e=localStorage.getItem("theme");e?i(e):window.matchMedia("(prefers-color-scheme: dark)").matches&&i("dark")},[]),(0,r.useEffect)(()=>{document.documentElement.classList.remove("light","dark"),document.documentElement.classList.add(a),localStorage.setItem("theme",a)},[a]),(0,o.jsx)(n.Provider,{value:{theme:a,toggleTheme:()=>{i(e=>"light"===e?"dark":"light")}},children:t})}function s(){let e=(0,r.useContext)(n);if(void 0===e)throw Error("useTheme must be used within a ThemeProvider");return e}}},function(e){e.O(0,[20,321,971,938,744],function(){return e(e.s=5910)}),_N_E=e.O()}]);